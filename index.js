require('dotenv').config();

const bot = require('./src/botInstance');
const { parseReminder } = require('./src/dateParser');
const { createReminder, sendReminder, deleteAllReminders, Reminder, handleCallback } = require('./src/reminderScheduler');
const listManager = require('./src/listManager');
const timeSpecParser = require('./src/timeSpecParser');
const pendingRequests = require('./src/pendingRequests');
const logger = require('./src/logger');
const { DateTime } = require('luxon');
const { agenda, scheduleReminder } = require('./src/agendaScheduler');
const settings = require('./src/settings');

// –ó–∞–ø—É—Å–∫ Agenda
(async function() {
  await agenda.start();
  logger.info('Agenda –∑–∞–ø—É—â–µ–Ω');
})();

function formatRepeatPhrase(repeat) {
  if (!repeat) return '–Ω–µ—Ç';
  const feminineAccusativeMap = {
    '–º–∏–Ω—É—Ç–∞': '–º–∏–Ω—É—Ç—É',
    '–Ω–µ–¥–µ–ª—è': '–Ω–µ–¥–µ–ª—é',
    '—Å—Ä–µ–¥–∞': '—Å—Ä–µ–¥—É',
    '–ø—è—Ç–Ω–∏—Ü–∞': '–ø—è—Ç–Ω–∏—Ü—É',
    '—Å—É–±–±–æ—Ç–∞': '—Å—É–±–±–æ—Ç—É'
  };
  const neutral = ['–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'];
  const parts = repeat.split(' ');
  if (parts.length === 1) {
    let unit = parts[0];
    if (feminineAccusativeMap[unit]) {
      return `–∫–∞–∂–¥—É—é ${feminineAccusativeMap[unit]}`;
    } else if (neutral.includes(unit)) {
      return `–∫–∞–∂–¥–æ–µ ${unit}`;
    } else {
      return `–∫–∞–∂–¥—ã–π ${unit}`;
    }
  } else {
    const multiplier = parts[0];
    const unit = parts.slice(1).join(' ');
    return `–∫–∞–∂–¥—ã–µ ${multiplier} ${unit}`;
  }
}

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const welcomeMessage = `–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.
  
–¢—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—è —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
"—á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ"

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
/list - —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/deleteall - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞`;
  bot.sendMessage(chatId, welcomeMessage);
});

bot.onText(/\/settings/, (msg) => {
  const chatId = msg.chat.id;
  settings.showSettingsMenu(chatId);
});

bot.onText(/\/list/, async (msg) => {
  const chatId = msg.chat.id;
  await listManager.sendPaginatedList(chatId, 0, false);
});

bot.onText(/\/deleteall/, async (msg) => {
  const chatId = msg.chat.id;
  try {
    await deleteAllReminders(chatId);
    bot.sendMessage(chatId, '–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã.');
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${error.message}`);
    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.');
  }
});

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–º
  if (msg.text) {
    if (msg.text.startsWith('/')) return;

    if (pendingRequests.pendingReminders[chatId]) {
      const pending = pendingRequests.pendingReminders[chatId];
      const description = msg.text;
      delete pendingRequests.pendingReminders[chatId];
      const reminder = await createReminder(chatId, description, pending.datetime, pending.repeat);
      await scheduleReminder(reminder);
      const eventDate = reminder.repeat ? (reminder.nextReminder || reminder.datetime) : reminder.datetime;
      const formattedDate = new Date(eventDate).toLocaleString('ru-RU', { dateStyle: 'long', timeStyle: 'short' });
      const confirmationText = `‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:
  
üìå ${description}
üïí ${formattedDate}
üîÅ –ü–æ–≤—Ç–æ—Ä: ${formatRepeatPhrase(pending.repeat)}`;
      await bot.sendMessage(chatId, confirmationText);
      return;
    }
    
    if (pendingRequests.pendingPostpone[chatId]) {
      const { reminderId, messageId } = pendingRequests.pendingPostpone[chatId];
      delete pendingRequests.pendingPostpone[chatId];
      const parsed = timeSpecParser.parseTimeSpec(msg.text);
      if (!parsed.datetime) {
        await bot.sendMessage(chatId, "–°–æ—Ä—Ä–∏, –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, '10 –º–∏–Ω—É—Ç', '5 –º–∏–Ω', '–∑–∞–≤—Ç—Ä–∞ –≤ 10' –∏–ª–∏ '—Å–µ–≥–æ–¥–Ω—è –≤ 17'.");
        return;
      }
      const newDateTime = parsed.datetime;
      const reminder = await Reminder.findById(reminderId);
      if (!reminder) {
        await bot.sendMessage(chatId, '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
        return;
      }
      reminder.datetime = newDateTime;
      reminder.messageIds = [];
      await reminder.save();
      const formattedNewTime = DateTime.fromJSDate(newDateTime).toFormat('HH:mm');
      await bot.editMessageText(`üîî –û—Ç–ª–æ–∂–µ–Ω–æ: ${reminder.description}`, { 
        chat_id: chatId, 
        message_id: messageId, 
        reply_markup: { inline_keyboard: [] }, 
        parse_mode: "HTML" 
      });
      await bot.sendMessage(chatId, `üîî –ü–æ–≤—Ç–æ—Ä–Ω–æ: ${reminder.description}\nüïí –ù–æ–≤–æ–µ –≤—Ä–µ–º—è: ${formattedNewTime}`, { parse_mode: "HTML" });
      await scheduleReminder(reminder);
      return;
    }

    const textNormalized = msg.text.replace(/—ë/g, '–µ').replace(/–Å/g, '–ï');
    logger.info(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user ${chatId}: "${textNormalized}"`);
    const { datetime: parsedDate, reminderText: description, timeSpec, repeat } = parseReminder(textNormalized);
    logger.info(`–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞: ${JSON.stringify({ timeSpec, reminderText: description, repeat, datetime: parsedDate })}`);
    if (!parsedDate) {
      await bot.sendMessage(chatId, "–°–æ—Ä—Ä–∏, –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, '–≤ 17 —É–∂–∏–Ω', '–≤ 1015 —É–±–æ—Ä–∫–∞', '—Å–µ–≥–æ–¥–Ω—è –≤ 17 —Ç–µ—Å—Ç', '–∑–∞–≤—Ç—Ä–∞ –≤ 17 —É–∂–∏–Ω' –∏–ª–∏ '—á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç —Ç–µ—Å—Ç'.");
      return;
    }
    
    if (parsedDate && !description) {
      pendingRequests.pendingReminders[chatId] = { datetime: parsedDate, repeat };
      await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:');
      return;
    }
    
    const reminder = await createReminder(chatId, description, parsedDate, repeat);
    await scheduleReminder(reminder);
    const eventDate = reminder.repeat ? (reminder.nextReminder || reminder.datetime) : reminder.datetime;
    const formattedDate = new Date(eventDate).toLocaleString('ru-RU', { dateStyle: 'long', timeStyle: 'short' });
    const confirmationText = `‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:
  
üìå ${description}
üïí ${formattedDate}
üîÅ –ü–æ–≤—Ç–æ—Ä: ${formatRepeatPhrase(repeat)}`;
    await bot.sendMessage(chatId, confirmationText);
  } else {
    logger.info(`index: –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user ${chatId}: ${JSON.stringify(msg)}`);
  }
});


bot.on('callback_query', async (query) => {
  if (query.data.startsWith("list_")) {
    await listManager.handleListCallback(query);
  } else if (query.data.startsWith("settings_")) {
    await settings.handleSettingsCallback(query);
  } else {
    await handleCallback(query);
  }
});

bot.on('location', (msg) => {
  settings.handleLocation(msg);
});

logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');