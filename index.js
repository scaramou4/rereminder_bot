require('dotenv').config();
const mongoose = require('mongoose');
const bot = require('./src/botInstance'); // ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞
const { extractDate, extractRepeatPattern, extractReminderText } = require('./src/dateParser');
require('./src/reminderScheduler'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

mongoose.connect('mongodb://127.0.0.1:27017/reminderBot');

const reminderSchema = new mongoose.Schema({
  userId: String,
  description: String,
  datetime: Date,
  repeat: String, 
});

// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–æ–¥–µ–ª—å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
const Reminder = mongoose.models.Reminder || mongoose.model('Reminder', reminderSchema);

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
function formatDate(date) {
  if (!date) return "–ë–µ–∑ –¥–∞—Ç—ã";
  const months = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è', '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'];
  const daysOfWeek = ['–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞'];
  return `${date.getDate()} ${months[date.getMonth()]} ${date.getFullYear()} (${daysOfWeek[date.getDay()]})`;
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞–∑–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
function formatConfirmationMessage(description, datetime) {
  return `‚úÖ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:</b>\n\nüìå <b>–ù–∞–ø–æ–º–Ω–∏—Ç—å:</b> ${description}\nüïí <b>–ö–æ–≥–¥–∞:</b> ${formatDate(datetime)}, ${String(datetime.getHours()).padStart(2, '0')}:${String(datetime.getMinutes()).padStart(2, '0')}`;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  bot.sendMessage(msg.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ –æ –¥–µ–ª–∞—Ö.");
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  let text = msg.text.toLowerCase().trim();

  if (text.startsWith('/')) return;

  let now = new Date();
  now.setSeconds(0);

  // üîπ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º "—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é" ‚Üí "—á–µ—Ä–µ–∑ 1 –Ω–µ–¥–µ–ª—é" (–∏ –≤—Å–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã)
  text = text.replace(/(^|\s)—á–µ—Ä–µ–∑\s+(–º–∏–Ω—É—Ç—É|–º–∏–Ω—É—Ç—ã|–º–∏–Ω—É—Ç|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤|–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç)(\s|$)/gi, '$1—á–µ—Ä–µ–∑ 1 $2$3');  

  // **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–º–µ–Ω–∞ —Ç–æ—á–Ω–æ —Å—Ä–∞–±–æ—Ç–∞–ª–∞**
  if (/\b—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é\b/.test(text)) {
    text = text.replace(/\b—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é\b/gi, '—á–µ—Ä–µ–∑ 1 –Ω–µ–¥–µ–ª—é');
  }

  console.log("üõ† –¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–º–µ–Ω—ã:", text); // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞

  let parsedDate = extractDate(text);
  let repeatPattern = extractRepeatPattern(text);
  let description = extractReminderText(text);

  console.log("üì© –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:", text);
  console.log("üìÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –¥–∞—Ç–∞:", parsedDate);
  console.log("üîÅ –ü–æ–≤—Ç–æ—Ä:", repeatPattern);
  console.log("‚úèÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:", description);

  // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º "—Å–µ–≥–æ–¥–Ω—è"
  const hasToday = /—Å–µ–≥–æ–¥–Ω—è/.test(text);
  const hasTime = /–≤\s(\d{1,2})(?::(\d{2}))?/i.test(text);

  if (hasToday && !parsedDate) {
    parsedDate = new Date();
    parsedDate.setSeconds(0);
    console.log("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ –¥–ª—è '—Å–µ–≥–æ–¥–Ω—è':", parsedDate);
  }

  // ‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ parsedDate –≤—Å—ë –µ—â—ë null, –ø—Ä–æ—Å–∏–º —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É
  if (!parsedDate && !repeatPattern) {
    return bot.sendMessage(chatId, '‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å –¥–∞—Ç—É –∏–ª–∏ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.');
  }

  // ‚è≥ –ï—Å–ª–∏ "—Å–µ–≥–æ–¥–Ω—è" –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ ‚Üí –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è
  if (hasToday && !hasTime) {
    return bot.sendMessage(chatId, '‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—Å–µ–≥–æ–¥–Ω—è –≤ 10").');
  }

  let reminderTime = new Date();
  reminderTime.setSeconds(0);

  if (repeatPattern) {
    reminderTime.setHours(9, 0);

    const timeMatch = text.match(/–≤\s(\d{1,2})(?::(\d{2}))?/i);
    if (timeMatch) {
      let hours = parseInt(timeMatch[1], 10);
      let minutes = timeMatch[2] ? parseInt(timeMatch[2], 10) : 0;
      reminderTime.setHours(hours, minutes);
      console.log("‚è≥ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ–≥–æ:", reminderTime);
    } else {
      console.log("‚è≥ –í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 09:00");
    }
  } else if (parsedDate) {
    parsedDate.setSeconds(0);

    const timeMatch = text.match(/–≤\s(\d{1,2})(?::(\d{2}))?/i);
    if (timeMatch) {
      let hours = parseInt(timeMatch[1], 10);
      let minutes = timeMatch[2] ? parseInt(timeMatch[2], 10) : 0;
      parsedDate.setHours(hours, minutes);
      console.log("‚è≥ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –Ω–∞:", parsedDate);
    } else if (parsedDate.getHours() === 0 && parsedDate.getMinutes() === 0) {
      parsedDate.setHours(now.getHours(), now.getMinutes());
      console.log("‚è≥ –í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–µ–∫—É—â–µ–µ:", parsedDate);
    }

    // üö® –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º –ª–∏ –¥–∞—Ç–∞
    if (parsedDate < now) {
      console.log("‚ùå –û—à–∏–±–∫–∞: –≤—Ä–µ–º—è –≤ –ø—Ä–æ—à–ª–æ–º!");
      return bot.sendMessage(chatId, '‚è≥ –°–æ–±—ã—Ç–∏–µ –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.');
    }
  }

  const reminder = new Reminder({
    userId: chatId,
    description: description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è',
    datetime: repeatPattern ? reminderTime : parsedDate, 
    repeat: repeatPattern,
  });

  await reminder.save();

  const confirmationMessage = formatConfirmationMessage(description, reminder.datetime);
  bot.sendMessage(chatId, confirmationMessage, { parse_mode: "HTML" });
});