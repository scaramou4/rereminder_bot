// index.js
require('dotenv').config();

const mongoose = require('mongoose');
const logger = require('./src/logger');
const bot = require('./src/botInstance');
const { createReminder, deleteAllReminders, handleCallback } = require('./src/reminderScheduler');
const listManager = require('./src/listManager');
const { DateTime } = require('luxon');
const settings = require('./src/settings');

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB –¥–ª—è –º–æ–¥–µ–ª–µ–π Mongoose
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/reminders', {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
  .then(() => logger.info('Mongoose –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ MongoDB'))
  .catch(err => {
    logger.error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Mongoose: ${err.message}`);
    process.exit(1);
  });

function formatRepeatPhrase(repeat) {
  if (!repeat) return '–Ω–µ—Ç';
  if (repeat.match(/^–∫–∞–∂–¥(—ã–π|–∞—è|—É—é|–æ–µ|—ã–µ)\s+/)) {
    return repeat;
  }
  const parts = repeat.trim().split(' ');
  let multiplier = parseInt(parts[0], 10);
  let unit = isNaN(multiplier) ? parts[0] : parts[1];
  const feminineAccusativeMap = {
    '–º–∏–Ω—É—Ç–∞': '–º–∏–Ω—É—Ç—É',
    '–Ω–µ–¥–µ–ª—è': '–Ω–µ–¥–µ–ª—é',
    '—Å—Ä–µ–¥–∞': '—Å—Ä–µ–¥—É',
    '–ø—è—Ç–Ω–∏—Ü–∞': '–ø—è—Ç–Ω–∏—Ü—É',
    '—Å—É–±–±–æ—Ç–∞': '—Å—É–±–±–æ—Ç—É'
  };
  const neutral = ['–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'];
  const masculine = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—á–µ—Ç–≤–µ—Ä–≥', '—á–∞—Å', '–¥–µ–Ω—å', '–º–µ—Å—è—Ü', '–≥–æ–¥'];

  if (multiplier === 1) {
    if (feminineAccusativeMap[unit]) return `–∫–∞–∂–¥—É—é ${feminineAccusativeMap[unit]}`;
    if (neutral.includes(unit))      return `–∫–∞–∂–¥–æ–µ ${unit}`;
    if (masculine.includes(unit))    return `–∫–∞–∂–¥—ã–π ${unit}`;
    return `–∫–∞–∂–¥—ã–π ${unit}`;
  } else {
    return `–∫–∞–∂–¥—ã–µ ${multiplier} ${unit}`;
  }
}

process.on('unhandledRejection', (reason, promise) => {
  logger.error(`Unhandled Rejection at: ${promise}, reason: ${reason}`);
});

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId,
    `–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.\n` +
    `–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n` +
    `"—á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ"\n\n` +
    `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
    `/start ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n` +
    `/list ‚Äî —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n` +
    `/deleteall ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n` +
    `/settings ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏`
  );
});

bot.onText(/\/settings/, (msg) => {
  settings.showSettingsMenu(msg.chat.id);
});

bot.onText(/\/list/, async (msg) => {
  try {
    await listManager.sendPaginatedList(msg.chat.id, 0, false);
  } catch (err) {
    logger.error(`–û—à–∏–±–∫–∞ /list –¥–ª—è ${msg.chat.id}: ${err.message}`);
    bot.sendMessage(msg.chat.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.');
  }
});

bot.onText(/\/deleteall/, async (msg) => {
  try {
    await deleteAllReminders(msg.chat.id);
    bot.sendMessage(msg.chat.id, '–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã.');
    logger.info(`/deleteall: —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è ${msg.chat.id}`);
  } catch (err) {
    logger.error(`–û—à–∏–±–∫–∞ /deleteall –¥–ª—è ${msg.chat.id}: ${err.message}`);
    bot.sendMessage(msg.chat.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.');
  }
});

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  if (msg.text && !msg.text.startsWith('/')) {
    const textNormalized = msg.text.replace(/—ë/gi, '–µ');
    logger.info(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${chatId}: "${textNormalized}"`);
    try {
      const reminder = await createReminder(userId, textNormalized, chatId);
      if (reminder) {
        const eventDate = reminder.repeat
          ? (reminder.nextReminder || reminder.datetime)
          : reminder.datetime;
        const us = await require('./src/models/userSettings')
          .findOne({ userId: chatId.toString() });
        const tz = us ? us.timezone : 'Europe/Moscow';
        const formatted = DateTime
          .fromJSDate(eventDate)
          .setZone(tz)
          .setLocale('ru')
          .toFormat('HH:mm, d MMMM yyyy');
        bot.sendMessage(chatId,
          `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:\n` +
          `üìå ${reminder.description}\n` +
          `üïí ${formatted}\n` +
          `üîÅ –ü–æ–≤—Ç–æ—Ä: ${formatRepeatPhrase(reminder.repeat)}`
        );
      }
    } catch (err) {
      logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ "${msg.text}" –æ—Ç ${userId}: ${err.message}`);
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
    }
  }
});

bot.on('callback_query', async (query) => {
  try {
    if (query.data.startsWith('list_')) {
      await listManager.handleListCallback(query);
    } else if (query.data.startsWith('settings_')) {
      await settings.handleSettingsCallback(query);
    } else {
      await handleCallback(query);
    }
  } catch (err) {
    logger.error(`Callback error ${query.from.id}: ${err.message}`);
    bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏.', show_alert: true });
  }
});

bot.on('location', (msg) => {
  settings.handleLocation(msg);
});

logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');