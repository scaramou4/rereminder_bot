// index.js
require('dotenv').config();

const bot = require('./src/botInstance');
const { createReminder, sendReminder, deleteAllReminders, Reminder, handleCallback } = require('./src/reminderScheduler');
const listManager = require('./src/listManager');
const timeSpecParser = require('./src/timeSpecParser');
const pendingRequests = require('./src/pendingRequests');
const logger = require('./src/logger');
const { DateTime } = require('luxon');
const { agenda } = require('./src/agendaScheduler'); // –£–±—Ä–∞–ª scheduleReminder –∏–∑ –∏–º–ø–æ—Ä—Ç–∞
const settings = require('./src/settings');

// –ó–∞–ø—É—Å–∫ Agenda
(async function() {
  await agenda.start();
  logger.info('Agenda –∑–∞–ø—É—â–µ–Ω');
})();

function formatRepeatPhrase(repeat) {
  if (!repeat) return '–Ω–µ—Ç';
  if (repeat.match(/^–∫–∞–∂–¥(—ã–π|–∞—è|—É—é|–æ–µ|—ã–µ)\s+/)) {
    return repeat;
  }
  const parts = repeat.trim().split(' ');
  let multiplier = parseInt(parts[0], 10);
  let unit = isNaN(multiplier) ? parts[0] : parts[1];
  const feminineAccusativeMap = { '–º–∏–Ω—É—Ç–∞': '–º–∏–Ω—É—Ç—É', '–Ω–µ–¥–µ–ª—è': '–Ω–µ–¥–µ–ª—é', '—Å—Ä–µ–¥–∞': '—Å—Ä–µ–¥—É', '–ø—è—Ç–Ω–∏—Ü–∞': '–ø—è—Ç–Ω–∏—Ü—É', '—Å—É–±–±–æ—Ç–∞': '—Å—É–±–±–æ—Ç—É' };
  const neutral = ['–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'];
  const masculine = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—á–µ—Ç–≤–µ—Ä–≥', '—á–∞—Å', '–¥–µ–Ω—å', '–º–µ—Å—è—Ü', '–≥–æ–¥'];
  return multiplier === 1 ? (feminineAccusativeMap[unit] ? `–∫–∞–∂–¥—É—é ${feminineAccusativeMap[unit]}` : neutral.includes(unit) ? `–∫–∞–∂–¥–æ–µ ${unit}` : masculine.includes(unit) ? `–∫–∞–∂–¥—ã–π ${unit}` : `–∫–∞–∂–¥—ã–π ${unit}`) : `–∫–∞–∂–¥—ã–µ ${multiplier} ${unit}`;
}

process.on('unhandledRejection', (reason, promise) => {
  logger.error(`Unhandled Rejection at: ${promise}, reason: ${reason}`);
});

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.\n–¢—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—è —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"—á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ"\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n/list - —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n/deleteall - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞`);
});

bot.onText(/\/settings/, (msg) => {
  const chatId = msg.chat.id;
  settings.showSettingsMenu(chatId);
});

bot.onText(/\/list/, async (msg) => {
  const chatId = msg.chat.id;
  try {
    await listManager.sendPaginatedList(chatId, 0, false);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /list –¥–ª—è user ${chatId}: ${error.message}`);
    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.');
  }
});

bot.onText(/\/deleteall/, async (msg) => {
  const chatId = msg.chat.id;
  try {
    await deleteAllReminders(chatId);
    bot.sendMessage(chatId, '–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã.');
    logger.info(`/deleteall: –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è user ${chatId}`);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${error.message}`);
    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.');
  }
});

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  if (msg.text && !msg.text.startsWith('/')) {
    try {
      const textNormalized = msg.text.replace(/—ë/g, '–µ').replace(/–Å/g, '–ï');
      logger.info(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user ${chatId}: "${textNormalized}"`);
      const reminder = await createReminder(userId, textNormalized, chatId);
      if (reminder) {
        const eventDate = reminder.repeat ? (reminder.nextReminder || reminder.datetime) : reminder.datetime;
        const userSettings = await require('./src/models/userSettings').findOne({ userId: chatId.toString() }) || { timezone: 'Europe/Moscow' };
        const formattedDate = DateTime.fromJSDate(eventDate).setZone(userSettings.timezone).setLocale('ru').toFormat('HH:mm, d MMMM yyyy');
        bot.sendMessage(chatId, `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:\nüìå ${reminder.description}\nüïí ${formattedDate}\nüîÅ –ü–æ–≤—Ç–æ—Ä: ${formatRepeatPhrase(reminder.repeat)}`);
      } else {
        logger.warn(`–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è user ${userId} –Ω–µ —É–¥–∞–ª–æ—Å—å. –¢–µ–∫—Å—Ç: "${textNormalized}"`);
        // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ createReminder
      }
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç user ${userId}: ${error.message}. –¢–µ–∫—Å—Ç: "${msg.text}"`);
      bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
    }
  } else if (msg.text) {
    logger.info(`–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç user ${chatId}: ${msg.text}`);
  } else {
    logger.info(`–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user ${chatId}: ${JSON.stringify(msg)}`);
  }
});

bot.on('callback_query', async (query) => {
  try {
    if (query.data.startsWith('list_')) {
      await listManager.handleListCallback(query);
    } else if (query.data.startsWith('settings_')) {
      await settings.handleSettingsCallback(query);
    } else {
      await handleCallback(query);
    }
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –æ—Ç user ${query.from.id}: ${error.message}`);
    bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.', show_alert: true });
  }
});

bot.on('location', (msg) => {
  settings.handleLocation(msg);
});

logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');