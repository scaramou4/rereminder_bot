require('dotenv').config();
const mongoose = require('mongoose');
const bot = require('./src/botInstance');
const { extractDate, extractRepeatPattern, extractReminderText } = require('./src/dateParser');
require('./src/reminderScheduler');

mongoose.connect('mongodb://127.0.0.1:27017/reminderBot');

const reminderSchema = new mongoose.Schema({
  userId: String,
  description: String,
  datetime: Date,
  repeat: String,
  lastNotified: Date, // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
});

const Reminder = mongoose.models.Reminder || mongoose.model('Reminder', reminderSchema);

// –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π)
const userState = {};

// –ö–æ–º–∞–Ω–¥–∞ /list (–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)
bot.onText(/\/list/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
  const reminders = await Reminder.find({ userId: chatId, datetime: { $gte: new Date() } });

  if (reminders.length === 0) {
    return bot.sendMessage(chatId, '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.');
  }

  userState[userId] = {
    reminders,
    page: 0,
  };

  sendRemindersPage(chatId, userId);
});

// –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
function sendRemindersPage(chatId, userId) {
  const state = userState[userId];
  if (!state) return;

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö –∫ –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω–∏–º)
  state.reminders.sort((a, b) => new Date(a.datetime) - new Date(b.datetime));

  const reminders = state.reminders;
  const page = state.page;

  const start = page * 10;
  const end = start + 10;
  const pageReminders = reminders.slice(start, end);

  if (pageReminders.length === 0) {
    bot.sendMessage(chatId, '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.');
    delete userState[userId];
    return;
  }

  let message = 'üìù <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n\n';
  pageReminders.forEach((reminder, index) => {
    const num = start + index + 1;
    const formattedTime = formatFullDate(reminder.datetime);
    const repeatText = reminder.repeat 
      ? `‚ôæ <i>${getRepeatText(reminder.repeat, reminder.datetime)}</i>\n`
      : '';
    message += `${num}) ‚åöÔ∏è ${formattedTime}\n${repeatText}„Ä∞Ô∏è ${reminder.description}\n\n`;
  });

  // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const totalPages = Math.ceil(reminders.length / 10);
  const buttons = [];

  if (page > 0) {
    buttons.push({ text: '‚è™', callback_data: 'first_page' });
    buttons.push({ text: '‚óÄ', callback_data: 'prev_page' });
  }
  if (page < totalPages - 1) {
    buttons.push({ text: '‚ñ∂', callback_data: 'next_page' });
    buttons.push({ text: '‚è©', callback_data: 'last_page' });
  }

  buttons.push({ text: '‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É', callback_data: 'delete_reminder' });

  const keyboard = { inline_keyboard: [buttons] };

  if (!state.messageId) {
    bot.sendMessage(chatId, message, { parse_mode: "HTML", reply_markup: keyboard }).then((sentMessage) => {
      userState[userId].messageId = sentMessage.message_id;
    });
  } else {
    bot.getChat(chatId).then(() => {
      bot.editMessageText(message, {
        chat_id: chatId,
        message_id: state.messageId,
        parse_mode: "HTML",
        reply_markup: keyboard,
      }).catch((err) => {
        if (err.response?.body?.description?.includes('message is not modified')) {
          console.log('‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.');
        } else {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
        }
      });
    });
  }
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã (–ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
function formatFullDate(date) {
  const daysOfWeek = ['–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞'];
  const months = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è', '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'];

  const d = new Date(date);
  const day = d.getDate();
  const month = months[d.getMonth()];
  const year = d.getFullYear();
  const dayOfWeek = daysOfWeek[d.getDay()];
  const time = `${String(d.getHours()).padStart(2, '0')}:${String(d.getMinutes()).padStart(2, '0')}`;

  return `${day} ${month} ${year} –≥. (${dayOfWeek}) –≤ ${time}`;
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∞
function getRepeatText(repeat, datetime) {
  const d = new Date(datetime);
  const time = `${String(d.getHours()).padStart(2, '0')}:${String(d.getMinutes()).padStart(2, '0')}`;

  switch (repeat) {
    case "daily": return `–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ ${time}`;
    case "weekly": return `–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –≤ ${time}`;
    case "monthly": return `–∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü –≤ ${time}`;
    default: return "";
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è (—Å–∫—Ä—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)
function showDeleteButtons(chatId, userId) {
  const state = userState[userId];
  if (!state) return;

  const start = state.page * 10;
  const end = start + 10;
  const pageReminders = state.reminders.slice(start, end);

  if (pageReminders.length === 0) {
    return bot.sendMessage(chatId, '‚ùå –ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.');
  }

  const buttons = [];
  for (let i = 0; i < pageReminders.length; i += 5) {
    buttons.push(
      pageReminders.slice(i, i + 5).map((_, idx) => ({
        text: `${start + i + idx + 1}`,
        callback_data: `del_${start + i + idx}`,
      }))
    );
  }

  buttons.push([{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_delete' }]);

  bot.editMessageReplyMarkup(
    { inline_keyboard: buttons },
    { chat_id: chatId, message_id: state.messageId }
  ).then(() => {
    state.deleteMessageId = state.messageId;
  }).catch(() => {
    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', {
      reply_markup: { inline_keyboard: buttons },
    }).then((sentMessage) => {
      state.deleteMessageId = sentMessage.message_id;
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è (—Å–∫—Ä—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é)
function cancelDeleteButtons(chatId, userId) {
  const state = userState[userId];
  if (!state || !state.deleteMessageId) return;

  sendRemindersPage(chatId, userId);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  const data = callbackQuery.data;

  if (data.startsWith('del_')) {
    const state = userState[userId];
    if (!state) return;

    const index = parseInt(data.split('_')[1], 10);
    if (index < 0 || index >= state.reminders.length) {
      return bot.sendMessage(chatId, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.');
    }

    const reminderToDelete = state.reminders[index];
    await Reminder.deleteOne({ _id: reminderToDelete._id });

    state.reminders = state.reminders.filter((_, i) => i !== index);

    bot.sendMessage(chatId, `‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ "${reminderToDelete.description}" –Ω–∞ ${formatDate(reminderToDelete.datetime)} —É–¥–∞–ª–µ–Ω–æ.`);

    if (state.reminders.length === 0) {
      bot.sendMessage(chatId, '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.');
      delete userState[userId];
    } else {
      sendRemindersPage(chatId, userId);
    }

    return;
  }

  switch (data) {
    case 'first_page':
      userState[userId].page = 0;
      break;
    case 'prev_page':
      userState[userId].page = Math.max(0, userState[userId].page - 1);
      break;
    case 'next_page':
      userState[userId].page = Math.min(
        Math.ceil(userState[userId].reminders.length / 10) - 1,
        userState[userId].page + 1
      );
      break;
    case 'last_page':
      userState[userId].page = Math.ceil(userState[userId].reminders.length / 10) - 1;
      break;
    case 'delete_reminder':
      return showDeleteButtons(chatId, userId);
    case 'cancel_delete':
      return cancelDeleteButtons(chatId, userId);
  }

  sendRemindersPage(chatId, userId);
  bot.answerCallbackQuery(callbackQuery.id);
});

// –ó–∞–ø–∏—Å—å –Ω–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text.trim();

  if (text.startsWith('/')) return;

  let parsedDate = extractDate(text);
  let repeatPattern = extractRepeatPattern(text);
  let description = extractReminderText(text);

  if (!parsedDate && !repeatPattern) {
    return bot.sendMessage(chatId, '‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å –¥–∞—Ç—É –∏–ª–∏ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.');
  }

  if (parsedDate < new Date()) {
    return bot.sendMessage(chatId, '‚è≥ –°–æ–±—ã—Ç–∏–µ –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.');
  }

  const reminder = new Reminder({
    userId: chatId,
    description: description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è',
    datetime: parsedDate,
    repeat: repeatPattern,
  });

  await reminder.save();

  bot.sendMessage(chatId, `‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:\n\nüìå ${description}\nüïí ${formatDate(parsedDate)}`, { parse_mode: "HTML" });
});

function formatDate(date) {
  return `${date.getDate()} ${['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è', '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'][date.getMonth()]} ${date.getFullYear()} (${date.getHours()}:${String(date.getMinutes()).padStart(2, '0')})`;
}

bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const firstName = msg.from.first_name || '–¥—Ä—É–≥';

  const welcomeMessage = `üëã –ü—Ä–∏–≤–µ—Ç, ${firstName}!\n\n–Ø —Ç–≤–æ–π –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞. 
–¢—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Ö –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º–∏.\n\n
üîπ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–ó–∞–≤—Ç—Ä–∞ –≤ 10 –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ".\n
üîπ –ò—Å–ø–æ–ª—å–∑—É–π /list, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n`;

  bot.sendMessage(chatId, welcomeMessage);
});