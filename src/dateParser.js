const { DateTime } = require('luxon');

const unitsMap = {
  '–º–∏–Ω—É—Ç': 'minutes', '–º–∏–Ω—É—Ç—É': 'minutes', '–º–∏–Ω—É—Ç—ã': 'minutes',
  '—á–∞—Å': 'hours', '—á–∞—Å–∞': 'hours', '—á–∞—Å–æ–≤': 'hours',
  '–¥–µ–Ω—å': 'days', '–¥–Ω—è': 'days', '–¥–Ω–µ–π': 'days',
  '–Ω–µ–¥–µ–ª—é': 'weeks', '–Ω–µ–¥–µ–ª–∏': 'weeks', '–Ω–µ–¥–µ–ª—å': 'weeks',
  '–º–µ—Å—è—Ü': 'months', '–º–µ—Å—è—Ü–∞': 'months', '–º–µ—Å—è—Ü–µ–≤': 'months',
  '–≥–æ–¥': 'years', '–≥–æ–¥–∞': 'years', '–ª–µ—Ç': 'years'
};

function preprocessText(text) {
  let processed = text
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º "—á–µ—Ä–µ–∑ 3 –¥–Ω—è", "—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –∏ 2 —á–∞—Å–∞"
    .replace(/—á–µ—Ä–µ–∑\s+(\d+)?\s*([–∞-—è]+)/gi, (_, num, unit) => {
      const enUnit = unitsMap[unit.toLowerCase()] || unit;
      return `in ${num || '1'} ${enUnit}`;
    })
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º "–≤ 11" –∏–ª–∏ "–≤ 11:30"
    .replace(/–≤\s+(\d{1,2})(?::(\d{2}))?/gi, 'at $1:$2')
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º "–∏ 2 —á–∞—Å–∞", "–∏ 3 –¥–Ω—è"
    .replace(/–∏\s+(\d+)\s*([–∞-—è]+)/gi, (_, num, unit) => {
      const enUnit = unitsMap[unit.toLowerCase()] || unit;
      return `and ${num} ${enUnit}`;
    });

  console.log('Processed Text:', processed);
  return processed;
}

function extractDate(text) {
  const processedText = preprocessText(text);

  let now = DateTime.local().setZone('UTC+3').set({ second: 0, millisecond: 0 });
  let parsedDate = now;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º "–∑–∞–≤—Ç—Ä–∞", "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"
  if (/–∑–∞–≤—Ç—Ä–∞/.test(text)) parsedDate = now.plus({ days: 1 });
  if (/–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞/.test(text)) parsedDate = now.plus({ days: 2 });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—á–µ—Ä–µ–∑ 3 –¥–Ω—è")
  const match = processedText.match(/in (\d+) (minutes|hours|days|weeks|months|years)/);
  if (match) {
    const amount = parseInt(match[1], 10);
    const unit = match[2];

    parsedDate = parsedDate.plus({ [unit]: amount });
  }

  // üîπ –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã ("–∏ 2 —á–∞—Å–∞", "–∏ 3 –¥–Ω—è")
  const extraMatches = [...processedText.matchAll(/and\s+(\d+)\s+(minutes|hours|days|weeks|months|years)/gi)];

  extraMatches.forEach(match => {
    const amount = parseInt(match[1], 10);
    const unit = match[2].replace(/s$/, ''); // –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ

    console.log(`‚ûï –î–æ–±–∞–≤–ª—è–µ–º ${amount} ${unit} –∫ –¥–∞—Ç–µ`);
    parsedDate = parsedDate.plus({ [unit]: amount });
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–∫–∞–∑–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ ("–≤ 11", "–≤ 15:30")
  const timeMatch = processedText.match(/at (\d{1,2})(?::(\d{2}))?/);
  if (timeMatch) {
    const hours = parseInt(timeMatch[1], 10);
    const minutes = timeMatch[2] ? parseInt(timeMatch[2], 10) : 0;
    parsedDate = parsedDate.set({ hour: hours, minute: minutes });
  }

  console.log('Base Date:', parsedDate.toISO());
  return parsedDate.toJSDate();
}

function extractRepeatPattern(text) {
  if (/–∫–∞–∂–¥—ã–π –¥–µ–Ω—å/gi.test(text)) return "daily";
  if (/–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é/gi.test(text)) return "weekly";
  if (/–∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü/gi.test(text)) return "monthly";
  return null; // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
}

function extractReminderText(originalText) {
  return originalText
    .replace(/(–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)/gi, '') // –£–±–∏—Ä–∞–µ–º "–∑–∞–≤—Ç—Ä–∞", "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"
    .replace(/—á–µ—Ä–µ–∑\s+\d*\s*[–∞-—è]+/gi, '') // –£–±–∏—Ä–∞–µ–º "—á–µ—Ä–µ–∑ 3 –¥–Ω—è", "—á–µ—Ä–µ–∑ –º–µ—Å—è—Ü"
    .replace(/–∏\s+\d+\s*[–∞-—è]+/gi, '') // –£–±–∏—Ä–∞–µ–º "–∏ 2 –¥–Ω—è"
    .replace(/–≤\s+\d{1,2}(:\d{2})?/gi, '') // –£–±–∏—Ä–∞–µ–º "–≤ 11", "–≤ 18:30"
    .replace(/\s{2,}/g, ' ') // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    .trim();
}

module.exports = {
  extractDate,
  extractRepeatPattern,
  extractReminderText
};