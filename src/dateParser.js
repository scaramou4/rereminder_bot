const chrono = require('chrono-node');

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ (—É–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏)
function preprocessText(text) {
    const unitsMap = {
        '–º–∏–Ω—É—Ç': 'minutes', '–º–∏–Ω—É—Ç—É': 'minutes', '–º–∏–Ω—É—Ç—ã': 'minutes',
        '—á–∞—Å': 'hours', '—á–∞—Å–∞': 'hours', '—á–∞—Å–æ–≤': 'hours',
        '–¥–µ–Ω—å': 'days', '–¥–Ω—è': 'days', '–¥–Ω–µ–π': 'days',
        '–Ω–µ–¥–µ–ª—é': 'weeks', '–Ω–µ–¥–µ–ª–∏': 'weeks', '–Ω–µ–¥–µ–ª—å': 'weeks',
        '–º–µ—Å—è—Ü': 'months', '–º–µ—Å—è—Ü–∞': 'months', '–º–µ—Å—è—Ü–µ–≤': 'months',
        '–≥–æ–¥': 'years', '–≥–æ–¥–∞': 'years', '–ª–µ—Ç': 'years'
    };

    let processed = text
        .replace(/–∏\s+(\d+)\s*([–∞-—è]+)/gi, (_, num, unit) => {
            const enUnit = unitsMap[unit.toLowerCase()] || unit;
            return ` and ${num} ${enUnit}`;
        })
        .replace(/(—á–µ—Ä–µ–∑|–≤)\s+(\d+)\s*([–∞-—è]+)/gi, (_, prefix, num, unit) => {
            const enUnit = unitsMap[unit.toLowerCase()] || unit;
            return `${prefix === '—á–µ—Ä–µ–∑' ? 'in' : 'at'} ${num} ${enUnit}`;
        })
        .replace(/–≤\s+(\d{1,2}):(\d{2})/gi, 'at $1:$2')
        .replace(/–≤\s+(\d{1,2})\s+(—É—Ç—Ä–∞|–¥–Ω—è|–≤–µ—á–µ—Ä–∞|–Ω–æ—á–∏)/gi, 'at $1');

    console.log('Processed Text:', processed);
    return processed;
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
function extractDate(text) {
    const processedText = preprocessText(text)
      .replace(/in (\d+) weeks?/gi, (_, num) => `in ${num * 7} days`);

    console.log('Chrono Input:', processedText);
    let parsedDate = chrono.parseDate(processedText);
    console.log('Base Date:', parsedDate);

    if (!parsedDate) return null;

    let newDate = new Date(parsedDate); // –ö–æ–ø–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—É—é –¥–∞—Ç—É

    // üîπ –ò—â–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã ("–∏ 2 —á–∞—Å–∞", "–∏ 3 –¥–Ω—è")
    const extraTimeMatches = [...processedText.matchAll(/and\s+(\d+)\s+(minutes?|hours?|days?|months?|years?)/gi)];

    extraTimeMatches.forEach(match => {
        const value = parseInt(match[1], 10);
        const unit = match[2].replace(/s$/, '');

        // ‚úÖ **–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞**: –µ—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ < 5 –º–∏–Ω—É—Ç/—á–∞—Å–æ–≤/–¥–Ω–µ–π ‚Äî –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
        let alreadyAdjusted = false;
        switch(unit) {
          case 'minute': alreadyAdjusted = Math.abs(parsedDate.getMinutes() - newDate.getMinutes()) < 5; break;
          case 'hour': alreadyAdjusted = Math.abs(parsedDate.getHours() - newDate.getHours()) < 1; break;
          case 'day': alreadyAdjusted = Math.abs(parsedDate.getDate() - newDate.getDate()) < 1; break;
          case 'month': alreadyAdjusted = Math.abs(parsedDate.getMonth() - newDate.getMonth()) < 1; break;
          case 'year': alreadyAdjusted = Math.abs(parsedDate.getFullYear() - newDate.getFullYear()) < 1; break;
        }

        if (alreadyAdjusted) {
            console.log(`‚è≥ Chrono —É–∂–µ —É—á—ë–ª ${value} ${unit}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            return;
        }

        console.log(`‚ûï –î–æ–±–∞–≤–ª—è–µ–º ${value} ${unit} –∫ –¥–∞—Ç–µ`);

        switch(unit) {
          case 'minute': newDate.setMinutes(newDate.getMinutes() + value); break;
          case 'hour': newDate.setHours(newDate.getHours() + value); break;
          case 'day': newDate.setDate(newDate.getDate() + value); break;
          case 'month': newDate.setMonth(newDate.getMonth() + value); break;
          case 'year': newDate.setFullYear(newDate.getFullYear() + value); break;
        }
    });

    return newDate;
}

// –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç–∏
function extractRepeatPattern(text) {
    if (/–∫–∞–∂–¥—ã–π –¥–µ–Ω—å/gi.test(text)) return "daily";
    if (/–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é/gi.test(text)) return "weekly";
    if (/–∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü/gi.test(text)) return "monthly";
    return null; // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ)
function extractReminderText(originalText) {
    return originalText
        .replace(/(—á–µ—Ä–µ–∑|in)\s+\d+\s*[–∞-—è]+\s*(–∏|and)?\s*(\d+\s*[–∞-—è]+)?/gi, '')
        .replace(/(–∏|and)\s+\d+\s*[–∞-—è]+/gi, '')
        .trim();
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
module.exports = {
    extractDate,
    extractRepeatPattern,
    extractReminderText
};