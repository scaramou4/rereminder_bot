// src/agendaScheduler.js
const Agenda = require('agenda');
const logger = require('./logger');
const bot = require('./botInstance');
const { DateTime } = require('luxon');
const Reminder = require('./models/reminder');

const mongoConnectionString = process.env.MONGODB_URI || 'mongodb://localhost:27017/reminders';
const agenda = new Agenda({ db: { address: mongoConnectionString, collection: 'agendaJobs' } });

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π Agenda
agenda.on('start', job => {
  logger.info(`Job "${job.attrs.name}" –∑–∞–ø—É—â–µ–Ω. –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(job.attrs.data)}`);
});
agenda.on('success', job => {
  logger.info(`Job "${job.attrs.name}" —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω. –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(job.attrs.data)}`);
});
agenda.on('fail', (err, job) => {
  logger.error(`Job "${job.attrs.name}" –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: ${err.message}. –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(job.attrs.data)}`);
});

// –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
agenda.define('sendReminder', async (job, done) => {
  const { reminderId } = job.attrs.data;
  try {
    const reminder = await Reminder.findById(reminderId);
    if (!reminder || reminder.completed) {
      await agenda.cancel({ 'data.reminderId': reminderId, name: 'inertiaReminder' });
      logger.info(`sendReminder: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${reminderId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. Job –æ—Ç–º–µ–Ω—ë–Ω.`);
      return done();
    }
    const reminderScheduler = require('./reminderScheduler');
    if (reminder.repeat) {
      logger.info(`sendReminder: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è reminder ${reminderId}`);
      await reminderScheduler.sendPlannedReminderRepeated(reminder, reminder.datetime);
    } else {
      logger.info(`sendReminder: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è reminder ${reminderId}`);
      await reminderScheduler.sendOneOffReminder(reminder);
    }
    const instanceId = Date.now().toString();
    job.attrs.data.instance = instanceId;
    await agenda.every('3 minutes', 'inertiaReminder', { reminderId, instance: instanceId }, { skipImmediate: true, unique: { 'data.reminderId': reminderId, 'data.instance': instanceId } });
    done();
  } catch (error) {
    logger.error(`sendReminder: –û—à–∏–±–∫–∞ –¥–ª—è reminder ${reminderId}: ${error.message}`);
    done(error);
  }
});

// –ó–∞–¥–∞—á–∞ –∏–Ω–µ—Ä—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
agenda.define('inertiaReminder', async (job, done) => {
  const { reminderId, instance } = job.attrs.data;
  try {
    const reminder = await Reminder.findById(reminderId);
    if (!reminder || reminder.completed) {
      await agenda.cancel({ 'data.reminderId': reminderId, name: 'inertiaReminder', 'data.instance': instance });
      logger.info(`inertiaReminder: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${reminderId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. Job –æ—Ç–º–µ–Ω—ë–Ω.`);
      return done();
    }
    // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –∑–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ "–û—Ç–ª–æ–∂–µ–Ω–æ: <—Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è>" –∏ —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    if (reminder.messageId) {
      try {
        await bot.editMessageText(`–û—Ç–ª–æ–∂–µ–Ω–æ: ${reminder.description}`, { 
          chat_id: reminder.userId, 
          message_id: reminder.messageId, 
          reply_markup: { inline_keyboard: [] },
          parse_mode: "HTML" 
        });
        logger.info(`inertiaReminder: –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ reminder ${reminderId} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ (–∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω—ã, —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω—ë–Ω).`);
      } catch (editErr) {
        logger.error(`inertiaReminder: –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è reminder ${reminderId}: ${editErr.message}`);
      }
    }
    const displayTime = DateTime.fromJSDate(reminder.datetime).setZone('Europe/Moscow').toFormat('HH:mm');
    const messageText = `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–ø–æ–≤—Ç–æ—Ä): ${reminder.description}\nüïí ${displayTime}`;
    const inlineKeyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '1 —á–∞—Å', callback_data: `postpone|1|${reminder._id}` },
            { text: '3 —á–∞—Å–∞', callback_data: `postpone|3|${reminder._id}` },
            { text: '—É—Ç—Ä–æ', callback_data: `postpone|—É—Ç—Ä–æ|${reminder._id}` },
            { text: '–≤–µ—á–µ—Ä', callback_data: `postpone|–≤–µ—á–µ—Ä|${reminder._id}` }
          ],
          [
            { text: '‚Ä¶', callback_data: `postpone|custom|${reminder._id}` },
            { text: '–ì–æ—Ç–æ–≤–æ', callback_data: `done|${reminder._id}` }
          ]
        ]
      }
    };
    logger.info(`inertiaReminder: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–µ—Ä—Ü–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è reminder ${reminderId}. –¢–µ–∫—Å—Ç: "${messageText}" —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: ${JSON.stringify(inlineKeyboard)}`);
    await bot.sendMessage(reminder.userId, messageText, inlineKeyboard);
    done();
  } catch (error) {
    logger.error(`inertiaReminder: –û—à–∏–±–∫–∞ –¥–ª—è reminder ${reminderId}: ${error.message}`);
    done(error);
  }
});

async function scheduleReminder(reminder) {
  try {
    if (reminder.repeat) {
      await agenda.every(reminder.repeat, 'sendReminder', { reminderId: reminder._id.toString() }, { timezone: 'Europe/Moscow', unique: { 'data.reminderId': reminder._id.toString() } });
      logger.info(`scheduleReminder: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è reminder ${reminder._id} —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º "${reminder.repeat}"`);
    } else {
      await agenda.schedule(reminder.datetime, 'sendReminder', { reminderId: reminder._id.toString() });
      logger.info(`scheduleReminder: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è reminder ${reminder._id} –Ω–∞ ${reminder.datetime}`);
    }
  } catch (error) {
    logger.error(`scheduleReminder: –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è reminder ${reminder._id}: ${error.message}`);
  }
}

async function cancelReminderJobs(reminderId) {
  try {
    await agenda.cancel({ 'data.reminderId': reminderId });
    logger.info(`cancelReminderJobs: –û—Ç–º–µ–Ω–µ–Ω—ã –≤—Å–µ Agenda –∑–∞–¥–∞—á–∏ –¥–ª—è reminder ${reminderId}`);
  } catch (error) {
    logger.error(`cancelReminderJobs: –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á –¥–ª—è reminder ${reminderId}: ${error.message}`);
  }
}

module.exports = {
  agenda,
  scheduleReminder,
  cancelReminderJobs,
};