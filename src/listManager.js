const bot = require('./botInstance');
const { listReminders, deleteReminder } = require('./reminderScheduler');
const logger = require('./logger');

/**
 * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
 * @param {string} chatId 
 * @param {number} page ‚Äì –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (0-based)
 * @param {boolean} deleteMode ‚Äì –µ—Å–ª–∏ true, –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
 * @returns {object} –û–±—ä–µ–∫—Ç –≤–∏–¥–∞ { text, keyboard }.
 */
async function renderList(chatId, page, deleteMode) {
  try {
    const reminders = await listReminders(chatId);
    const itemsPerPage = 10;
    const total = reminders.length;
    const totalPages = Math.ceil(total / itemsPerPage);
    if (total === 0) {
      return { text: "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.", keyboard: { inline_keyboard: [] } };
    }
    if (page < 0) page = 0;
    if (page >= totalPages) page = totalPages - 1;
    const startIndex = page * itemsPerPage;
    const pageReminders = reminders.slice(startIndex, startIndex + itemsPerPage);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç:
    // 1-—è —Å—Ç—Ä–æ–∫–∞: –Ω–æ–º–µ—Ä. <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {description}</b>
    // 2-—è —Å—Ç—Ä–æ–∫–∞: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {formattedTime}
    // 3-—è —Å—Ç—Ä–æ–∫–∞: –ü–æ–≤—Ç–æ—Ä: {–∫–∞–∂–¥—ã–π ... / –Ω–µ—Ç}
    // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    let text = `–í–∞—à–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1} –∏–∑ ${totalPages}):\n\n`;
    
    pageReminders.forEach((reminder, idx) => {
      const num = startIndex + idx + 1;
      const formattedTime = new Date(reminder.datetime).toLocaleString('ru-RU', { dateStyle: 'short', timeStyle: 'short' });
      text += `<b>${num}. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${reminder.description}</b>\n`;
      text += `–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${formattedTime}\n`;
      text += `–ü–æ–≤—Ç–æ—Ä: ${reminder.repeat ? '–∫–∞–∂–¥—ã–π ' + reminder.repeat : '–Ω–µ—Ç'}\n\n`;
    });
    
    let keyboard;
    if (!deleteMode) {
      // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: "‚èÆÔ∏è", "‚óÄÔ∏è", "üóëÔ∏è", "‚ñ∂Ô∏è", "‚è≠Ô∏è"
      keyboard = [
        [
          { text: "‚èÆÔ∏è", callback_data: `list_first|${page}` },
          { text: "‚óÄÔ∏è", callback_data: `list_prev|${page}` },
          { text: "üóëÔ∏è", callback_data: `list_toggle|${page}` },
          { text: "‚ñ∂Ô∏è", callback_data: `list_next|${page}` },
          { text: "‚è≠Ô∏è", callback_data: `list_last|${page}` }
        ]
      ];
    } else {
      // –†–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è: –∫–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∫–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
      let rows = [];
      let currentButtons = [];
      pageReminders.forEach((reminder, idx) => {
        currentButtons.push({ text: `${startIndex + idx + 1}`, callback_data: `list_delete|${reminder._id}|${page}` });
        if ((idx + 1) % 5 === 0) {
          rows.push(currentButtons);
          currentButtons = [];
        }
      });
      if (currentButtons.length > 0) {
        rows.push(currentButtons);
      }
      rows.push([{ text: "–û—Ç–º–µ–Ω–∞", callback_data: `list_cancel|${page}` }]);
      keyboard = rows;
    }
    return { text, keyboard: { inline_keyboard: keyboard } };
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${error.message}`);
    return { text: "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.", keyboard: { inline_keyboard: [] } };
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
 * –ï—Å–ª–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ—à–∏–±–∫–∞ "message is not modified" –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.
 * @param {string} chatId 
 * @param {number} page 
 * @param {boolean} deleteMode 
 * @param {number|null} messageId ‚Äì –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ; –∏–Ω–∞—á–µ ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ.
 */
async function sendPaginatedList(chatId, page, deleteMode, messageId = null) {
  try {
    const { text, keyboard } = await renderList(chatId, page, deleteMode);
    if (messageId) {
      try {
        await bot.editMessageText(text, { chat_id: chatId, message_id: messageId, reply_markup: keyboard, parse_mode: "HTML" });
      } catch (error) {
        if (error.message && error.message.includes("message is not modified")) {
          logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.");
        } else {
          throw error;
        }
      }
    } else {
      await bot.sendMessage(chatId, text, { reply_markup: keyboard, parse_mode: "HTML" });
    }
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${error.message}`);
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback‚Äë–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
 */
async function handleListCallback(query) {
  try {
    const data = query.data;
    const chatId = query.message.chat.id;
    const messageId = query.message.message_id;
    const parts = data.split("|");
    let action = parts[0]; // –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: list_first, list_prev, list_next, list_last, list_toggle, list_cancel, list_delete
    let currentPage = parts[1] ? parseInt(parts[1], 10) : 0;
    let newPage = currentPage;
    let deleteMode = false;
    
    if (action === "list_first") {
      newPage = 0;
    } else if (action === "list_prev") {
      newPage = currentPage - 1;
      if (newPage < 0) newPage = 0;
    } else if (action === "list_next") {
      const reminders = await listReminders(chatId);
      const totalPages = Math.ceil(reminders.length / 10);
      newPage = currentPage + 1;
      if (newPage >= totalPages) newPage = totalPages - 1;
    } else if (action === "list_last") {
      const reminders = await listReminders(chatId);
      const totalPages = Math.ceil(reminders.length / 10);
      newPage = totalPages - 1;
    } else if (action === "list_toggle") {
      deleteMode = true;
      newPage = currentPage;
    } else if (action === "list_cancel") {
      deleteMode = false;
      newPage = currentPage;
    } else if (action === "list_delete") {
      const reminderId = parts[1];
      newPage = parts[2] ? parseInt(parts[2], 10) : currentPage;
      const deletedReminder = await deleteReminder(reminderId);
      if (deletedReminder) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –≤ —á–∞—Ç (–±–µ–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞)
        await bot.sendMessage(chatId, `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ "${deletedReminder.description}" —É–¥–∞–ª–µ–Ω–æ`);
      } else {
        await bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
      }
      deleteMode = true;
      await sendPaginatedList(chatId, newPage, deleteMode, messageId);
      return; // –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ answerCallbackQuery
    }
    
    await sendPaginatedList(chatId, newPage, deleteMode, messageId);
    await bot.answerCallbackQuery(query.id);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞: ${error.message}`);
    try {
      await bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞', show_alert: true });
    } catch (err) {
      logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ callback –æ—Ç–≤–µ—Ç–∞: ${err.message}`);
    }
  }
}

module.exports = {
  renderList,
  sendPaginatedList,
  handleListCallback
};