// settings.js
const bot = require('./botInstance');
const logger = require('./logger');
const UserSettings = require('./models/userSettings');
const { DateTime } = require('luxon');
const geoTz = require('geo-tz');
const { throttle } = require('lodash');

// –û–ø—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è
const POSTPONE_OPTIONS = [
  "5 –º–∏–Ω", "10 –º–∏–Ω", "15 –º–∏–Ω", "20 –º–∏–Ω", "30 –º–∏–Ω",
  "1 —á–∞—Å", "2 —á–∞—Å–∞", "3 —á–∞—Å–∞", "4 —á–∞—Å–∞",
  "1 –¥–µ–Ω—å", "2 –¥–Ω—è", "3 –¥–Ω—è", "7 –¥–Ω–µ–π",
  "—É—Ç—Ä–æ", "–≤–µ—á–µ—Ä", "‚Ä¶"
];

// –û–ø—Ü–∏–∏ –∞–≤—Ç–æ–æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è
const AUTO_POSTPONE_OPTIONS = ["5 –º–∏–Ω", "10 –º–∏–Ω", "15 –º–∏–Ω", "20 –º–∏–Ω", "30 –º–∏–Ω", "45 –º–∏–Ω", "60 –º–∏–Ω"];

// –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
const TIMEZONE_OFFSETS = Array.from({ length: 25 }, (_, i) => i - 12);

// –ö—ç—à —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
const settingsMessagesCache = new Map();

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
 * @param {Number} chatId - ID —á–∞—Ç–∞
 */
async function showSettingsMenu(chatId) {
  try {
    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚è∞ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data: "settings_timezone" }],
          [{ text: "‚è≥ –í—Ä–µ–º—è –æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è", callback_data: "settings_postpone" }],
          [{ text: "üîÑ –ê–≤—Ç–æ–æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ", callback_data: "settings_auto" }],
          [
            { text: "üåÖ –£—Ç—Ä–æ", callback_data: "settings_morning" },
            { text: "üåá –í–µ—á–µ—Ä", callback_data: "settings_evening" }
          ]
        ]
      }
    };

    const message = await bot.sendMessage(
      chatId, 
      "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
      keyboard
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    settingsMessagesCache.set(chatId, message.message_id);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${error.message}`);
    throw error;
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è
 * @param {Number} chatId - ID —á–∞—Ç–∞
 * @param {Number} [messageId] - ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function showPostponeSettingsMenu(chatId, messageId = null) {
  try {
    let settings = await UserSettings.findOne({ userId: chatId.toString() });
    
    if (!settings) {
      settings = new UserSettings({
        userId: chatId.toString(),
        postponeSettings: [...POSTPONE_OPTIONS],
        selectedPostponeSettings: ["30 –º–∏–Ω", "1 —á–∞—Å", "3 —á–∞—Å–∞", "—É—Ç—Ä–æ", "–≤–µ—á–µ—Ä", "‚Ä¶"]
      });
      await settings.save();
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ–ø—Ü–∏–π
    const allOptions = [...new Set([...POSTPONE_OPTIONS, ...settings.postponeSettings])];
    settings.postponeSettings = allOptions;
    await settings.save();

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ–ø—Ü–∏–π
    const buttons = allOptions.map(opt => ({
      text: `${settings.selectedPostponeSettings.includes(opt) ? '‚úÖ ' : ''}${opt}`,
      callback_data: `settings_postpone_option_${opt}`
    }));

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
    const rows = [];
    for (let i = 0; i < buttons.length; i += 3) {
      rows.push(buttons.slice(i, i + 3));
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    rows.push([
      { text: "‚úîÔ∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data: "settings_postpone_ok" },
      { text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "settings_postpone_cancel" }
    ]);

    const keyboard = { reply_markup: { inline_keyboard: rows } };
    const text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è (–æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ ‚úÖ –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã):";

    if (messageId) {
      await bot.editMessageText(text, { 
        chat_id: chatId, 
        message_id: messageId, 
        ...keyboard 
      });
    } else {
      const message = await bot.sendMessage(chatId, text, keyboard);
      settingsMessagesCache.set(chatId, message.message_id);
    }
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è: ${error.message}`);
    throw error;
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è
 * @param {Number} chatId - ID —á–∞—Ç–∞
 * @param {Number} [messageId] - ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function showAutoPostponeSettings(chatId, messageId = null) {
  try {
    let settings = await UserSettings.findOne({ userId: chatId.toString() });
    
    if (!settings) {
      settings = new UserSettings({ userId: chatId.toString(), autoPostponeDelay: 15 });
      await settings.save();
    }

    const currentDelay = settings.autoPostponeDelay;
    const buttons = AUTO_POSTPONE_OPTIONS.map(opt => {
      const minutes = parseInt(opt);
      return {
        text: `${minutes === currentDelay ? '‚úÖ ' : ''}${opt}`,
        callback_data: `settings_auto_option_${minutes}`
      };
    });

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
    const rows = [];
    for (let i = 0; i < buttons.length; i += 3) {
      rows.push(buttons.slice(i, i + 3));
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    rows.push([{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "settings_auto_cancel" }]);

    const keyboard = { reply_markup: { inline_keyboard: rows } };
    const text = "‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∞–≤—Ç–æ–æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è (–≤ –º–∏–Ω—É—Ç–∞—Ö):";

    if (messageId) {
      await bot.editMessageText(text, { 
        chat_id: chatId, 
        message_id: messageId, 
        ...keyboard 
      });
    } else {
      const message = await bot.sendMessage(chatId, text, keyboard);
      settingsMessagesCache.set(chatId, message.message_id);
    }
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è: ${error.message}`);
    throw error;
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
 * @param {Number} chatId - ID —á–∞—Ç–∞
 * @param {Number} [messageId] - ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function showMorningSettings(chatId, messageId = null) {
  try {
    let settings = await UserSettings.findOne({ userId: chatId.toString() });
    
    if (!settings) {
      settings = new UserSettings({ userId: chatId.toString(), morningTime: "9:00" });
      await settings.save();
    }

    const morningOptions = ["6:00", "7:00", "8:00", "9:00", "10:00", "11:00"];
    const buttons = morningOptions.map(opt => ({
      text: `${settings.morningTime === opt ? '‚úÖ ' : ''}${opt}`,
      callback_data: `settings_morning_option_${opt}`
    }));

    const rows = [
      buttons.slice(0, 3),
      buttons.slice(3, 6),
      [
        { text: "‚úîÔ∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data: "settings_morning_ok" },
        { text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "settings_morning_cancel" }
      ]
    ];

    const keyboard = { reply_markup: { inline_keyboard: rows } };
    const text = "üåÖ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:";

    if (messageId) {
      await bot.editMessageText(text, { 
        chat_id: chatId, 
        message_id: messageId, 
        ...keyboard 
      });
    } else {
      const message = await bot.sendMessage(chatId, text, keyboard);
      settingsMessagesCache.set(chatId, message.message_id);
    }
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${error.message}`);
    throw error;
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
 * @param {Number} chatId - ID —á–∞—Ç–∞
 * @param {Number} [messageId] - ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function showEveningSettings(chatId, messageId = null) {
  try {
    let settings = await UserSettings.findOne({ userId: chatId.toString() });
    
    if (!settings) {
      settings = new UserSettings({ userId: chatId.toString(), eveningTime: "18:00" });
      await settings.save();
    }

    const eveningOptions = ["17:00", "18:00", "19:00", "20:00", "21:00", "22:00", "23:00"];
    const buttons = eveningOptions.map(opt => ({
      text: `${settings.eveningTime === opt ? '‚úÖ ' : ''}${opt}`,
      callback_data: `settings_evening_option_${opt}`
    }));

    const rows = [
      buttons.slice(0, 4),
      buttons.slice(4),
      [
        { text: "‚úîÔ∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data: "settings_evening_ok" },
        { text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "settings_evening_cancel" }
      ]
    ];

    const keyboard = { reply_markup: { inline_keyboard: rows } };
    const text = "üåá –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –≤–µ—á–µ—Ä–Ω–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:";

    if (messageId) {
      await bot.editMessageText(text, { 
        chat_id: chatId, 
        message_id: messageId, 
        ...keyboard 
      });
    } else {
      const message = await bot.sendMessage(chatId, text, keyboard);
      settingsMessagesCache.set(chatId, message.message_id);
    }
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–µ—á–µ—Ä–Ω–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${error.message}`);
    throw error;
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
 * @param {Number} chatId - ID —á–∞—Ç–∞
 */
async function showTimezoneSelection(chatId) {
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
    const locationMsg = await bot.sendMessage(
      chatId,
      "üìç –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é (–∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ) " +
      "–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤—Ä—É—á–Ω—É—é:",
      {
        reply_markup: {
          keyboard: [[{ text: "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location: true }]],
          resize_keyboard: true,
          one_time_keyboard: true
        }
      }
    );

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –≤—Ä—É—á–Ω—É—é
    const buttons = TIMEZONE_OFFSETS.map(offset => ({
      text: `UTC${offset >= 0 ? '+' : ''}${offset}`,
      callback_data: `settings_timezone_utc_${offset}`
    }));

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 4 –≤ —Ä—è–¥
    const rows = [];
    for (let i = 0; i < buttons.length; i += 4) {
      rows.push(buttons.slice(i, i + 4));
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    rows.push([{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "settings_cancel" }]);

    const inlineKeyboard = { reply_markup: { inline_keyboard: rows } };
    const inlineMsg = await bot.sendMessage(
      chatId, 
      "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (UTC):",
      inlineKeyboard
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    if (!settingsMessagesCache.has(chatId)) {
      settingsMessagesCache.set(chatId, []);
    }
    
    settingsMessagesCache.get(chatId).push(
      locationMsg.message_id,
      inlineMsg.message_id
    );
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: ${error.message}`);
    throw error;
  }
}

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Number} chatId - ID —á–∞—Ç–∞
 * @param {String} timezone - –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
 */
async function setUserTimezone(chatId, timezone) {
  try {
    let ianaTimezone = timezone;
    
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω UTC offset, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ IANA timezone
    if (timezone.startsWith('UTC')) {
      const offset = parseInt(timezone.replace('UTC', ''));
      const possibleTimezones = geoTz.find(0, offset * 15); // –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è offset
      ianaTimezone = possibleTimezones[0] || 'Europe/Moscow';
    }

    let settings = await UserSettings.findOne({ userId: chatId.toString() });
    
    if (!settings) {
      settings = new UserSettings({ userId: chatId.toString() });
    }
    
    settings.timezone = ianaTimezone;
    await settings.save();
    
    logger.info(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å ${ianaTimezone} –¥–ª—è user ${chatId}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await bot.sendMessage(
      chatId,
      `‚è∞ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${ianaTimezone}`,
      { reply_markup: { remove_keyboard: true } }
    );
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: ${error.message}`);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Number} chatId - ID —á–∞—Ç–∞
 * @returns {String} –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
 */
async function getUserTimezone(chatId) {
  try {
    const settings = await UserSettings.findOne({ userId: chatId.toString() });
    return settings?.timezone || 'Europe/Moscow';
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: ${error.message}`);
    return 'Europe/Moscow';
  }
}

/**
 * –°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
 * @param {String} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {String} reminderId - ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
 * @param {Boolean} forNotification - –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 * @returns {Object} –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
 */
async function buildUserPostponeKeyboard(userId, reminderId, forNotification = false) {
  try {
    let settings = await UserSettings.findOne({ userId: userId.toString() });
    
    if (!settings) {
      settings = new UserSettings({
        userId: userId.toString(),
        postponeSettings: [...POSTPONE_OPTIONS],
        selectedPostponeSettings: ["5 –º–∏–Ω", "10 –º–∏–Ω", "15 –º–∏–Ω", "30 –º–∏–Ω", "1 —á–∞—Å", "3 —á–∞—Å–∞", "—É—Ç—Ä–æ", "–≤–µ—á–µ—Ä", "‚Ä¶"]
      });
    }

    const activeOptions = POSTPONE_OPTIONS.filter(opt => 
      settings.selectedPostponeSettings.includes(opt)
    );

    const optionMap = {
      "5 –º–∏–Ω": "5m", "10 –º–∏–Ω": "10m", "15 –º–∏–Ω": "15m", "20 –º–∏–Ω": "20m", "30 –º–∏–Ω": "30m",
      "1 —á–∞—Å": "1h", "2 —á–∞—Å–∞": "2h", "3 —á–∞—Å–∞": "3h", "4 —á–∞—Å–∞": "4h",
      "1 –¥–µ–Ω—å": "1d", "2 –¥–Ω—è": "2d", "3 –¥–Ω—è": "3d", "7 –¥–Ω–µ–π": "7d",
      "—É—Ç—Ä–æ": "am", "–≤–µ—á–µ—Ä": "pm", "‚Ä¶": "custom"
    };

    const buttons = activeOptions.map(opt => ({
      text: opt,
      callback_data: `postpone|${optionMap[opt] || opt}|${reminderId}`
    }));

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
    const rows = [];
    for (let i = 0; i < buttons.length; i += 3) {
      rows.push(buttons.slice(i, i + 3));
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ" –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (forNotification) {
      rows.push([{ text: "‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data: `done|${reminderId}` }]);
    }

    return { reply_markup: { inline_keyboard: rows } };
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è: ${error.message}`);
    return { reply_markup: { inline_keyboard: [] } };
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
 * @param {Object} query - –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞
 */
const handleSettingsCallback = throttle(async (query) => {
  try {
    const chatId = query.message.chat.id;
    const data = query.data;
    const messageId = query.message.message_id;

    logger.info(`–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${data}`);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
    if (data.endsWith("_cancel")) {
      try {
        await bot.editMessageText("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", {
          chat_id: chatId,
          message_id: messageId,
          reply_markup: { inline_keyboard: [] }
        });
      } catch (error) {
        logger.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ${error.message}`);
      }

      // –£–¥–∞–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏)
      if (settingsMessagesCache.has(chatId)) {
        const messages = settingsMessagesCache.get(chatId);
        
        if (Array.isArray(messages)) {
          for (const msgId of messages) {
            try {
              if (msgId !== messageId) {
                await bot.deleteMessage(chatId, msgId);
              }
            } catch (error) {
              logger.warn(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
            }
          }
        }
        
        settingsMessagesCache.delete(chatId);
      }

      await bot.answerCallbackQuery(query.id);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    if (data.startsWith("settings_timezone_utc_")) {
      const offset = parseInt(data.split('_')[3], 10);
      const timezone = `UTC${offset >= 0 ? '+' : ''}${offset}`;
      
      await setUserTimezone(chatId, timezone);
      
      await bot.editMessageText(`‚è∞ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å ${timezone}`, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: { inline_keyboard: [] }
      });

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
      if (settingsMessagesCache.has(chatId)) {
        const messages = settingsMessagesCache.get(chatId);
        
        if (Array.isArray(messages)) {
          for (const msgId of messages) {
            try {
              if (msgId !== messageId) {
                await bot.deleteMessage(chatId, msgId);
              }
            } catch (error) {
              logger.warn(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
            }
          }
        }
        
        settingsMessagesCache.delete(chatId);
      }

      await bot.answerCallbackQuery(query.id);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è
    if (data.startsWith("settings_postpone_option_")) {
      const option = data.replace("settings_postpone_option_", "");
      let settings = await UserSettings.findOne({ userId: chatId.toString() });
      
      if (!settings) {
        settings = new UserSettings({ userId: chatId.toString() });
      }

      if (!settings.selectedPostponeSettings) {
        settings.selectedPostponeSettings = [];
      }

      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ü–∏–∏
      if (settings.selectedPostponeSettings.includes(option)) {
        settings.selectedPostponeSettings = settings.selectedPostponeSettings.filter(
          opt => opt !== option
        );
      } else {
        settings.selectedPostponeSettings.push(option);
      }

      await settings.save();
      await showPostponeSettingsMenu(chatId, messageId);
      await bot.answerCallbackQuery(query.id);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è
    if (data.startsWith("settings_auto_option_")) {
      const minutes = parseInt(data.replace("settings_auto_option_", ""), 10);
      
      if (isNaN(minutes)) {
        await bot.answerCallbackQuery(query.id, {
          text: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
          show_alert: true
        });
        return;
      }

      let settings = await UserSettings.findOne({ userId: chatId.toString() });
      
      if (!settings) {
        settings = new UserSettings({ userId: chatId.toString() });
      }

      settings.autoPostponeDelay = minutes;
      await settings.save();
      
      await bot.editMessageText(`üîÑ –ê–≤—Ç–æ–æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ${minutes} –º–∏–Ω—É—Ç`, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: { inline_keyboard: [] }
      });
      
      await bot.answerCallbackQuery(query.id);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    if (data.startsWith("settings_morning_option_")) {
      const time = data.replace("settings_morning_option_", "");
      let settings = await UserSettings.findOne({ userId: chatId.toString() });
      
      if (!settings) {
        settings = new UserSettings({ userId: chatId.toString() });
      }

      settings.morningTime = time;
      await settings.save();
      await showMorningSettings(chatId, messageId);
      await bot.answerCallbackQuery(query.id);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    if (data.startsWith("settings_evening_option_")) {
      const time = data.replace("settings_evening_option_", "");
      let settings = await UserSettings.findOne({ userId: chatId.toString() });
      
      if (!settings) {
        settings = new UserSettings({ userId: chatId.toString() });
      }

      settings.eveningTime = time;
      await settings.save();
      await showEveningSettings(chatId, messageId);
      await bot.answerCallbackQuery(query.id);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if (data.endsWith("_ok")) {
      let message;
      
      if (data.startsWith("settings_postpone")) {
        message = "‚è≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã";
      } else if (data.startsWith("settings_morning")) {
        message = "üåÖ –£—Ç—Ä–µ–Ω–Ω–µ–µ –≤—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ";
      } else if (data.startsWith("settings_evening")) {
        message = "üåá –í–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ";
      } else {
        message = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã";
      }

      await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: { inline_keyboard: [] }
      });
      
      await showSettingsMenu(chatId);
      await bot.answerCallbackQuery(query.id);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    switch (data) {
      case "settings_timezone":
        await bot.deleteMessage(chatId, messageId);
        await showTimezoneSelection(chatId);
        break;
        
      case "settings_postpone":
        await showPostponeSettingsMenu(chatId, messageId);
        break;
        
      case "settings_auto":
        await showAutoPostponeSettings(chatId, messageId);
        break;
        
      case "settings_morning":
        await showMorningSettings(chatId, messageId);
        break;
        
      case "settings_evening":
        await showEveningSettings(chatId, messageId);
        break;
        
      default:
        await bot.answerCallbackQuery(query.id, {
          text: "–≠—Ç–æ—Ç –ø—É–Ω–∫—Ç –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω"
        });
        return;
    }

    await bot.answerCallbackQuery(query.id);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${error.message}`);
    
    try {
      await bot.answerCallbackQuery(query.id, {
        text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞",
        show_alert: true
      });
    } catch (err) {
      logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ callback: ${err.message}`);
    }
  }
}, 500);

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
 * @param {Object} msg - –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
 */
async function handleLocation(msg) {
  const chatId = msg.chat.id;
  
  try {
    if (!msg.location || !msg.location.latitude || !msg.location.longitude) {
      await bot.sendMessage(
        chatId, 
        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.",
        { reply_markup: { remove_keyboard: true } }
      );
      return;
    }

    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    if (settingsMessagesCache.has(chatId)) {
      const messages = settingsMessagesCache.get(chatId);
      
      if (Array.isArray(messages)) {
        for (const msgId of messages) {
          try {
            await bot.deleteMessage(chatId, msgId);
          } catch (error) {
            logger.warn(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
          }
        }
      }
      
      settingsMessagesCache.delete(chatId);
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
    const timezones = geoTz.find(msg.location.latitude, msg.location.longitude);
    
    if (!timezones || timezones.length === 0) {
      await bot.sendMessage(
        chatId,
        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ –≤–∞—à–µ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Europe/Moscow.",
        { reply_markup: { remove_keyboard: true } }
      );
      return;
    }

    const ianaTimezone = timezones[0];
    await setUserTimezone(chatId, ianaTimezone);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: ${error.message}`);
    
    await bot.sendMessage(
      chatId,
      "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Europe/Moscow.",
      { reply_markup: { remove_keyboard: true } }
    );
  }
}

module.exports = {
  showSettingsMenu,
  showPostponeSettingsMenu,
  showTimezoneSelection,
  setUserTimezone,
  getUserTimezone,
  buildUserPostponeKeyboard,
  showAutoPostponeSettings,
  showMorningSettings,
  showEveningSettings,
  handleSettingsCallback,
  handleLocation
};