const schedule = require('node-schedule');
const mongoose = require('mongoose');
const bot = require('./botInstance');
const { extractDate } = require('./dateParser');

const reminderSchema = new mongoose.Schema({
  userId: String,
  description: String,
  datetime: Date,
  repeat: String,
  lastNotified: Date,
  lastMessageId: Number,
});

const Reminder = mongoose.models.Reminder || mongoose.model('Reminder', reminderSchema);

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ –≤–∏–¥–µ "HH:mm, D MMMM YYYY" (–Ω–∞–ø—Ä–∏–º–µ—Ä, "13:20, 4 —Ñ–µ–≤—Ä–∞–ª—è 2025")
 */
function formatPostponedDate(date) {
  const d = new Date(date);
  const hours = d.getHours().toString().padStart(2, '0');
  const minutes = d.getMinutes().toString().padStart(2, '0');
  const day = d.getDate();
  const months = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è', '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'];
  const month = months[d.getMonth()];
  const year = d.getFullYear();
  return `${hours}:${minutes}, ${day} ${month} ${year}`;
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
 * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
 */
async function sendReminder(reminder) {
  const chatId = reminder.userId;
  const inlineKeyboard = {
    inline_keyboard: [
      [
        { text: '1 —á–∞—Å', callback_data: `postpone_1_${reminder._id}` },
        { text: '3 —á–∞—Å–∞', callback_data: `postpone_3_${reminder._id}` }
      ],
      [
        { text: '...', callback_data: `postpone_custom_${reminder._id}` },
        { text: '–ì–æ—Ç–æ–≤–æ', callback_data: `done_${reminder._id}` }
      ]
    ]
  };

  const messageText = `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${reminder.description}`;

  try {
    const sentMessage = await bot.sendMessage(chatId, messageText, { reply_markup: inlineKeyboard });
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    reminder.lastMessageId = sentMessage.message_id;
    reminder.lastNotified = new Date();
    await reminder.save();
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ${reminder._id}:`, err);
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Å—Ç—É–ø–∏–ª–æ, –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
 */
async function checkReminders() {
  const now = new Date();
  console.log(`‚è≥ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (${now.toISOString()})`);

  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Å—Ç—É–ø–∏–ª–æ –∏–ª–∏ –ø—Ä–æ—à–ª–æ
  const reminders = await Reminder.find({ datetime: { $lte: now } });
  console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${reminders.length} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.`);

  for (const reminder of reminders) {
    await sendReminder(reminder);
  }
}

// –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
schedule.scheduleJob('* * * * *', checkReminders);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π inline-–∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
  const data = callbackQuery.data;
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;

  if (data.startsWith('postpone_')) {
    const parts = data.split('_'); // –ü—Ä–∏–º–µ—Ä: ["postpone", "1", reminderId]
    const action = parts[1]; // "1", "3" –∏–ª–∏ "custom"
    const reminderId = parts.slice(2).join('_');

    try {
      const reminder = await Reminder.findById(reminderId);
      if (!reminder) {
        await bot.answerCallbackQuery(callbackQuery.id, { text: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.' });
        return;
      }

      if (action === '1') {
        // –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 1 —á–∞—Å
        reminder.datetime = new Date(reminder.datetime.getTime() + 60 * 60 * 1000);
      } else if (action === '3') {
        // –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 3 —á–∞—Å–∞
        reminder.datetime = new Date(reminder.datetime.getTime() + 3 * 60 * 60 * 1000);
      } else if (action === 'custom') {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)
        await bot.answerCallbackQuery(callbackQuery.id, { text: '–§—É–Ω–∫—Ü–∏—è "–û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è" –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.' });
        return;
      }
      await reminder.save();

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ç—Ä–µ–±—É–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
      const updatedText = `üîî –û—Ç–ª–æ–∂–µ–Ω–æ: ${reminder.description}\nüïí ${formatPostponedDate(reminder.datetime)}`;
      await bot.editMessageText(updatedText, { chat_id: chatId, message_id: messageId });
      await bot.answerCallbackQuery(callbackQuery.id, { text: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ.' });
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ postpone:', err);
      await bot.answerCallbackQuery(callbackQuery.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.' });
    }
  } else if (data.startsWith('done_')) {
    const reminderId = data.split('_')[1];
    try {
      const reminder = await Reminder.findById(reminderId);
      if (!reminder) {
        await bot.answerCallbackQuery(callbackQuery.id, { text: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.' });
        return;
      }
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è—è –≥–∞–ª–æ—á–∫—É –∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
      const updatedText = `‚úîÔ∏è ${reminder.description}`;
      await bot.editMessageText(updatedText, { chat_id: chatId, message_id: messageId });
      // –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã, —á—Ç–æ–±—ã –æ–Ω–æ –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ
      await Reminder.deleteOne({ _id: reminderId });
      await bot.answerCallbackQuery(callbackQuery.id, { text: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ.' });
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ "–ì–æ—Ç–æ–≤–æ":', err);
      await bot.answerCallbackQuery(callbackQuery.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.' });
    }
  }
});

module.exports = {
  checkReminders,
};