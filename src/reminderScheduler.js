const mongoose = require('mongoose');
const { DateTime } = require('luxon');
const bot = require('./botInstance');
const logger = require('./logger');
const pendingRequests = require('./pendingRequests');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB (–±–µ–∑ deprecated‚Äë–æ–ø—Ü–∏–π)
mongoose
  .connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/reminders')
  .then(() => logger.info('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'))
  .catch((error) => logger.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: ' + error.message));

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
const reminderSchema = new mongoose.Schema({
  userId: { type: String, required: true },
  description: { type: String, required: true },
  datetime: { type: Date, required: true },
  repeat: { type: String, default: null },
  lastNotified: { type: Date, default: null },
  messageIds: { type: [Number], default: [] },
  completed: { type: Boolean, default: false }
});

const Reminder = mongoose.model('Reminder', reminderSchema);

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑–µ.
 */
async function createReminder(userId, description, datetime, repeat) {
  try {
    const reminder = new Reminder({
      userId,
      description,
      datetime,
      repeat: repeat || null,
      lastNotified: null,
      messageIds: []
    });
    await reminder.save();
    logger.info(`–°–æ–∑–¥–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è user ${userId} –Ω–∞ ${datetime}`);
    return reminder;
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${error.message}`);
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (datetime >= —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã) –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ userId,
 * –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏.
 */
async function listReminders(userId) {
  try {
    return await Reminder.find({
      userId: userId.toString(),
      completed: false,
      datetime: { $gte: new Date() }
    }).sort({ datetime: 1 });
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è ${userId}: ${error.message}`);
    return [];
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ userId.
 */
async function deleteAllReminders(userId) {
  try {
    await Reminder.deleteMany({ userId: userId.toString() });
    logger.info(`–£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è ${userId}: ${error.message}`);
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –µ–≥–æ ID.
 */
async function deleteReminder(reminderId) {
  try {
    const deleted = await Reminder.findByIdAndDelete(reminderId);
    if (deleted) {
      logger.info(`–£–¥–∞–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${reminderId}`);
      return deleted;
    } else {
      logger.error(`–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${reminderId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è`);
      return null;
    }
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ${reminderId}: ${error.message}`);
    return null;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å inline‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
 */
async function sendReminder(reminder) {
  try {
    const formattedTime = DateTime.fromJSDate(reminder.datetime).toFormat('HH:mm');
    let messageText = `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${reminder.description}\nüïí ${formattedTime}`;
    if (reminder.repeat) {
      messageText += `\nüîÅ –ü–æ–≤—Ç–æ—Ä: ${reminder.repeat}`;
    }
    const inlineKeyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '1 —á–∞—Å', callback_data: `postpone|1|${reminder._id}` },
            { text: '3 —á–∞—Å–∞', callback_data: `postpone|3|${reminder._id}` }
          ],
          [
            { text: '‚Ä¶', callback_data: `postpone|custom|${reminder._id}` },
            { text: '–ì–æ—Ç–æ–≤–æ', callback_data: `done|${reminder._id}` }
          ]
        ]
      }
    };
    const sentMessage = await bot.sendMessage(reminder.userId, messageText, inlineKeyboard);
    reminder.messageIds.push(sentMessage.message_id);
    reminder.lastNotified = new Date();
    await reminder.save();
    logger.info(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${reminder.userId}, message_id: ${sentMessage.message_id}`);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${error.message}`);
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
 * –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—É–¥–∞–ª—è—è inline‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
 */
async function updateReminderNotifications(reminder) {
  try {
    for (let messageId of reminder.messageIds) {
      try {
        const newText = `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${reminder.description}`;
        await bot.editMessageText(newText, { 
          chat_id: reminder.userId, 
          message_id: messageId,
          reply_markup: { inline_keyboard: [] }
        });
        logger.info(`–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ${messageId} –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ${reminder._id}`);
      } catch (err) {
        logger.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}: ${err.message}`);
      }
    }
    reminder.messageIds = [];
    await reminder.save();
    await sendReminder(reminder);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${error.message}`);
  }
}

/**
 * –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è,
 * –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Å—Ç—É–ø–∏–ª–æ, –∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç,
 * –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ.
 */
function startScheduler() {
  setInterval(async () => {
    try {
      const now = new Date();
      const reminders = await Reminder.find({ datetime: { $lte: now }, completed: false });
      for (let reminder of reminders) {
        const lastNotified = reminder.lastNotified ? new Date(reminder.lastNotified) : null;
        const threshold = 2 * 60 * 1000;
        if (!lastNotified || (now - lastNotified >= threshold)) {
          if (reminder.messageIds.length > 0) {
            await updateReminderNotifications(reminder);
          } else {
            await sendReminder(reminder);
          }
          if (reminder.repeat) {
            if (reminder.repeat.toLowerCase().includes('–¥–µ–Ω—å')) {
              reminder.datetime = DateTime.fromJSDate(reminder.datetime).plus({ days: 1 }).toJSDate();
            } else if (reminder.repeat.toLowerCase().includes('–≤—Ç–æ—Ä–Ω–∏–∫')) {
              reminder.datetime = DateTime.fromJSDate(reminder.datetime).plus({ days: 7 }).toJSDate();
            }
            reminder.messageIds = [];
            await reminder.save();
          }
        }
      }
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: ${error.message}`);
    }
  }, 60 * 1000);
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback‚Äë–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è postpone –∏ done.
 * –ü—Ä–∏ postpone:
 *  - –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "1" –∏–ª–∏ "3", –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
 *    –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è: —Ç–µ–∫—Å—Ç –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ "–û—Ç–ª–æ–∂–µ–Ω–æ: <—Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏>",
 *    —É–¥–∞–ª—è—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏, –∏ –≤—ã–≤–æ–¥–∏—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º:
 *      "üîî –ü–æ–≤—Ç–æ—Ä: <—Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è>"
 *      "üïí –ù–æ–≤–æ–µ –≤—Ä–µ–º—è: <–Ω–æ–≤–æ–µ –≤—Ä–µ–º—è>"
 *  - –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "custom", —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è pendingPostpone —Å –ø–µ—Ä–µ–¥–∞—á–µ–π reminderId –∏ messageId,
 *    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏.
 * –ü—Ä–∏ done:
 *  - –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –Ω–∞ "‚úÖ <—Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è>", –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è, –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ –±–∞–∑—ã.
 */
async function handleCallback(query) {
  try {
    const data = query.data;
    const chatId = query.message.chat.id;
    const messageId = query.message.message_id;
    const parts = data.split('|');
    if (parts[0] === 'postpone') {
      const postponeValue = parts[1]; // '1', '3' –∏–ª–∏ 'custom'
      const reminderId = parts[2];
      const reminder = await Reminder.findById(reminderId);
      if (!reminder) {
        await bot.answerCallbackQuery(query.id, { text: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
        return;
      }
      if (postponeValue === 'custom') {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º pending –∑–∞–ø—Ä–æ—Å —Å reminderId –∏ messageId
        pendingRequests.pendingPostpone[chatId] = { reminderId, messageId };
        await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç—Å—Ä–æ—á–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "30 –º–∏–Ω—É—Ç"):');
        await bot.answerCallbackQuery(query.id, { text: '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç—Å—Ä–æ—á–∫–∏' });
        return;
      } else {
        const hours = parseInt(postponeValue, 10);
        const newDateTime = DateTime.local().plus({ hours }).toJSDate();
        reminder.datetime = newDateTime;
        reminder.messageIds = [];
        await reminder.save();
        const formattedNewTime = DateTime.fromJSDate(newDateTime).toFormat('HH:mm');
        const editedText = `–û—Ç–ª–æ–∂–µ–Ω–æ: ${reminder.description}`;
        await bot.editMessageText(editedText, { 
          chat_id: chatId, 
          message_id: messageId, 
          reply_markup: { inline_keyboard: [] } 
        });
        await bot.sendMessage(chatId, `üîî –ü–æ–≤—Ç–æ—Ä: ${reminder.description}\nüïí –ù–æ–≤–æ–µ –≤—Ä–µ–º—è: ${formattedNewTime}`);
        await bot.answerCallbackQuery(query.id, { text: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç—Å—Ä–æ—á–µ–Ω–æ' });
      }
    } else if (parts[0] === 'done') {
      const reminderId = parts[1];
      const reminder = await Reminder.findById(reminderId);
      if (!reminder) {
        await bot.answerCallbackQuery(query.id, { text: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
        return;
      }
      const newText = `‚úÖ ${reminder.description}`;
      await bot.editMessageText(newText, { 
        chat_id: chatId, 
        message_id: messageId,
        reply_markup: { inline_keyboard: [] }
      });
      await Reminder.findByIdAndDelete(reminderId);
      await bot.answerCallbackQuery(query.id, { text: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ' });
    }
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: ${error.message}`);
  }
}

module.exports = {
  createReminder,
  listReminders,
  deleteAllReminders,
  deleteReminder,
  sendReminder,
  updateReminderNotifications,
  startScheduler,
  handleCallback,
  Reminder // –≠–∫—Å–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
};