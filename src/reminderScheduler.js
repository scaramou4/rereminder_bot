const schedule = require('node-schedule');
const mongoose = require('mongoose');
const bot = require('./botInstance');
const logger = require('./logger');

// –ò–∑–º–µ–Ω—ë–Ω–Ω–∞—è —Å—Ö–µ–º–∞: —Ç–µ–ø–µ—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ messageIds.
const reminderSchema = new mongoose.Schema({
  userId: String,
  description: String,
  datetime: Date,
  repeat: String,
  lastNotified: Date, // –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  messageIds: [Number]  // –º–∞—Å—Å–∏–≤ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
});
const Reminder = mongoose.models.Reminder || mongoose.model('Reminder', reminderSchema);

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –≤–∏–¥–µ "HH:MM"
function formatTime(date) {
  const d = new Date(date);
  return `${String(d.getHours()).padStart(2, '0')}:${String(d.getMinutes()).padStart(2, '0')}`;
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
 * –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ (—á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã) –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è,
 * —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è –∏—Ö (—É–¥–∞–ª—è—è —Å—Ç—Ä–æ–∫—É —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ,
 * –∏—Å–ø–æ–ª—å–∑—É—è –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏).
 */
async function sendReminder(reminder) {
  const chatId = reminder.userId;
  // –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–µ–º
  const originalText = `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${reminder.description}\nüïí ${formatTime(reminder.datetime)}`;
  // –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Ö–æ—Ç–∏–º –≤–∏–¥–µ—Ç—å –≤ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)
  const updatedText = `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${reminder.description}`;
  
  // –ü—Ä–∏–º–µ—Ä inline‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
  const inlineKeyboard = {
    inline_keyboard: [
      [
        { text: '1 —á–∞—Å', callback_data: `postpone_1_${reminder._id}` },
        { text: '3 —á–∞—Å–∞', callback_data: `postpone_3_${reminder._id}` }
      ],
      [
        { text: '...', callback_data: `postpone_custom_${reminder._id}` },
        { text: '–ì–æ—Ç–æ–≤–æ', callback_data: `done_${reminder._id}` }
      ]
    ]
  };

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–ø–µ—Ä–≤—ã–π —Ä–∞–∑ ‚Äì —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º)
    const sentMsg = await bot.sendMessage(chatId, originalText, { reply_markup: inlineKeyboard });
    // –ï—Å–ª–∏ messageIds –µ—â—ë –Ω–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    if (!reminder.messageIds) {
      reminder.messageIds = [];
    }
    reminder.messageIds.push(sentMsg.message_id);
    reminder.lastNotified = new Date();
    await reminder.save();
    logger.info(`Scheduler: Sent reminder ${reminder._id} to user ${chatId} with message ID ${sentMsg.message_id}.`);

    // –ß–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è) –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª
    setTimeout(async () => {
      const currentReminder = await Reminder.findById(reminder._id);
      if (!currentReminder) return;
      
      // –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Å—Å–∏–≤ messageIds
      const messagesToUpdate = currentReminder.messageIds ? [...currentReminder.messageIds] : [];
      
      // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —Å—Ç–∞—Ä–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∏ –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ –æ–±–Ω–æ–≤–∏—Ç—å
      for (const msgId of messagesToUpdate) {
        try {
          await bot.editMessageText(updatedText, {
            chat_id: chatId,
            message_id: msgId,
            reply_markup: { inline_keyboard: [] }
          });
          logger.info(`Scheduler: Updated message ${msgId} for reminder ${reminder._id} (removed time and buttons).`);
          // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ, —É–¥–∞–ª—è–µ–º —ç—Ç–æ—Ç id –∏–∑ –º–∞—Å—Å–∏–≤–∞
          const index = currentReminder.messageIds.indexOf(msgId);
          if (index > -1) {
            currentReminder.messageIds.splice(index, 1);
          }
        } catch (editErr) {
          if (editErr.message && editErr.message.includes("message is not modified")) {
            logger.info(`Scheduler: Message ${msgId} already updated.`);
            const index = currentReminder.messageIds.indexOf(msgId);
            if (index > -1) {
              currentReminder.messageIds.splice(index, 1);
            }
          } else {
            logger.warn(`Scheduler: Failed to update message ${msgId} for reminder ${reminder._id}: ${editErr.message}`);
          }
        }
      }
      await currentReminder.save();

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚Äì —Ç–µ–ø–µ—Ä—å —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏) –∏ —Ä–∞–±–æ—á–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
      try {
        const newMsg = await bot.sendMessage(chatId, updatedText, { reply_markup: inlineKeyboard });
        currentReminder.lastNotified = new Date();
        currentReminder.messageIds.push(newMsg.message_id);
        await currentReminder.save();
        logger.info(`Scheduler: Resent reminder ${reminder._id} to user ${chatId} with new message ID ${newMsg.message_id}.`);
      } catch (sendErr) {
        logger.error(`Scheduler: Error resending reminder ${reminder._id}: ${sendErr.message}`);
      }
      
    }, 2 * 60 * 1000); // 2 –º–∏–Ω—É—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

  } catch (err) {
    logger.error(`Scheduler: Error sending reminder ${reminder._id}: ${err.message}`);
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
 * –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –∏—â—É—Ç—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Å—Ç—É–ø–∏–ª–æ –∏ –ª–∏–±–æ –Ω–µ –±—ã–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–æ,
 * –ª–∏–±–æ –ø—Ä–æ—à–ª–æ –Ω–µ –º–µ–Ω–µ–µ 2 –º–∏–Ω—É—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
 */
async function checkReminders() {
  const now = new Date();
  const twoMinutesAgo = new Date(now.getTime() - 2 * 60 * 1000);
  const reminders = await Reminder.find({
    datetime: { $lte: now },
    $or: [
      { lastNotified: null },
      { lastNotified: { $lte: twoMinutesAgo } }
    ]
  });
  logger.info(`Scheduler: Found ${reminders.length} reminders to send.`);
  for (const reminder of reminders) {
    await sendReminder(reminder);
  }
}

// –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
schedule.scheduleJob('* * * * *', checkReminders);

module.exports = { checkReminders };