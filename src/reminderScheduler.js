const mongoose = require('mongoose');
const { DateTime } = require('luxon');
const bot = require('./botInstance');
const logger = require('./logger');
const pendingRequests = require('./pendingRequests');
const { computeNextTimeFromScheduled } = require('./dateParser');
const { scheduleReminder, cancelReminderJobs } = require('./agendaScheduler');
const Reminder = require('./models/reminder');

mongoose
  .connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/reminders')
  .then(() => logger.info('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'))
  .catch((error) => logger.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: ' + error.message));

async function createReminder(userId, description, datetime, repeat) {
  try {
    let nextReminder = null;
    const now = DateTime.now().setZone('Europe/Moscow', { keepLocalTime: true });
    const dt = DateTime.fromJSDate(datetime, { zone: 'Europe/Moscow' });
    if (repeat) {
      if (dt > now) {
        nextReminder = datetime;
      } else {
        nextReminder = computeNextTimeFromScheduled(datetime, repeat);
      }
      logger.info(`createReminder: –î–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–æ nextReminder: ${nextReminder}`);
    }
    const reminder = new Reminder({
      userId,
      description,
      datetime,
      repeat: repeat || null,
      nextReminder,
      lastNotified: null,
      cycles: [],
      messageId: null,
      postponedReminder: null,
      inertiaMessageId: null,
      initialMessageEdited: false
    });
    await reminder.save();
    logger.info(`createReminder: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è user ${userId} –Ω–∞ ${datetime}`);
    await scheduleReminder(reminder);
    return reminder;
  } catch (error) {
    logger.error(`createReminder: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${error.message}`);
  }
}

async function listReminders(userId) {
  try {
    const now = new Date();
    const reminders = await Reminder.aggregate([
      {
        $match: {
          userId: userId.toString(),
          completed: false,
          $or: [
            { repeat: { $ne: null } },
            { datetime: { $gte: now } },
            { postponedReminder: { $gte: now } }
          ]
        }
      },
      {
        $addFields: {
          nextEvent: {
            $cond: [
              { $eq: ["$repeat", null] },
              { $ifNull: ["$postponedReminder", "$datetime"] },
              { $cond: [{ $gt: ["$nextReminder", "$datetime"] }, "$nextReminder", "$datetime"] }
            ]
          }
        }
      },
      { $sort: { nextEvent: 1 } }
    ]);
    logger.info(`listReminders: –ù–∞–π–¥–µ–Ω–æ ${reminders.length} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è user ${userId}`);
    return reminders;
  } catch (error) {
    logger.error(`listReminders: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è ${userId}: ${error.message}`);
    return [];
  }
}

async function deleteAllReminders(userId) {
  try {
    await Reminder.deleteMany({ userId: userId.toString() });
    logger.info(`deleteAllReminders: –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è user ${userId} —É–¥–∞–ª–µ–Ω—ã`);
  } catch (error) {
    logger.error(`deleteAllReminders: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è ${userId}: ${error.message}`);
  }
}

async function deleteReminder(reminderId) {
  try {
    await cancelReminderJobs(reminderId);
    const deleted = await Reminder.findByIdAndDelete(reminderId);
    if (deleted) {
      logger.info(`deleteReminder: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${reminderId} —É–¥–∞–ª–µ–Ω–æ`);
      return deleted;
    } else {
      logger.error(`deleteReminder: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${reminderId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è`);
      return null;
    }
  } catch (error) {
    logger.error(`deleteReminder: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ${reminderId}: ${error.message}`);
    return null;
  }
}

function toMoscow(dt) {
  return DateTime.fromJSDate(dt, { zone: 'Europe/Moscow' });
}

async function processPostponed(reminder, options = {}) {
  const displayTime = options.cycle 
    ? toMoscow(options.cycle.plannedTime).toFormat('HH:mm')
    : toMoscow(reminder.datetime).toFormat('HH:mm');
  const editText = `–û—Ç–ª–æ–∂–µ–Ω–æ: ${reminder.description}\nüïí ${displayTime}`;
  try {
    if (options.cycle) {
      await bot.editMessageText(editText, { 
        chat_id: reminder.userId, 
        message_id: options.cycle.messageId,
        reply_markup: { inline_keyboard: [] },
        parse_mode: "HTML" 
      });
      logger.info(`processPostponed: –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–Ω–µ—Ä—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ reminder ${reminder._id} (—É–¥–∞–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏), cycle: ${JSON.stringify(options.cycle)}`);
    } else {
      await bot.editMessageText(editText, {
        chat_id: reminder.userId,
        message_id: reminder.messageId,
        reply_markup: { inline_keyboard: [] },
        parse_mode: "HTML"
      });
      logger.info(`processPostponed: –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ reminder ${reminder._id} (—É–¥–∞–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏)`);
    }
  } catch (err) {
    logger.error(`processPostponed: –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è reminder ${reminder._id}: ${err.message}`);
  }
  const inlineKeyboard = {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '1 —á–∞—Å', callback_data: `postpone|1|${reminder._id}` },
          { text: '3 —á–∞—Å–∞', callback_data: `postpone|3|${reminder._id}` },
          { text: '—É—Ç—Ä–æ', callback_data: `postpone|—É—Ç—Ä–æ|${reminder._id}` },
          { text: '–≤–µ—á–µ—Ä', callback_data: `postpone|–≤–µ—á–µ—Ä|${reminder._id}` }
        ],
        [
          { text: '‚Ä¶', callback_data: `postpone|custom|${reminder._id}` },
          { text: '–ì–æ—Ç–æ–≤–æ', callback_data: `done|${reminder._id}` }
        ]
      ]
    }
  };
  const messageText = options.cycle 
    ? `–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ–≤—Ç–æ—Ä: ${reminder.description}\nüïí ${displayTime}`
    : `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${reminder.description}\nüïí ${displayTime}`;
  try {
    const newMsg = await bot.sendMessage(reminder.userId, messageText, inlineKeyboard);
    logger.info(`processPostponed: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è reminder ${reminder._id}, messageId: ${newMsg.message_id}`);
    const newPostponed = DateTime.local().setZone('Europe/Moscow').plus({ minutes: 3 }).toJSDate();
    if (options.cycle) {
      options.cycle.messageId = newMsg.message_id;
      options.cycle.postponedReminder = newPostponed;
    } else {
      reminder.messageId = newMsg.message_id;
      reminder.postponedReminder = newPostponed;
      reminder.lastNotified = new Date();
    }
    await reminder.save();
  } catch (err) {
    logger.error(`processPostponed: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è reminder ${reminder._id}: ${err.message}`);
  }
}

async function processPlannedRepeat(reminder) {
  const currentCycleTime = toMoscow(reminder.nextReminder);
  await sendPlannedReminderRepeated(reminder, currentCycleTime.toJSDate());
  const nextOccurrence = computeNextTimeFromScheduled(currentCycleTime.toJSDate(), reminder.repeat);
  reminder.datetime = currentCycleTime.toJSDate();
  reminder.nextReminder = nextOccurrence;
  reminder.lastNotified = new Date();
  if (reminder.cycles && reminder.cycles.length > 0) {
    reminder.cycles = [reminder.cycles[reminder.cycles.length - 1]];
  }
  await reminder.save();
  logger.info(`processPlannedRepeat: –û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${reminder._id}, nextReminder: ${nextOccurrence}`);
}

async function sendPlannedReminderRepeated(reminder, displayTimeOverride) {
  const displayTime = toMoscow(displayTimeOverride).toFormat('HH:mm');
  const messageText = `–ü–æ–≤—Ç–æ—Ä –ø–æ –ø–ª–∞–Ω—É: ${reminder.description}\nüïí ${displayTime}`;
  logger.info(`sendPlannedReminderRepeated: –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–ª–∞–Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è reminder ${reminder._id}. –¢–µ–∫—Å—Ç: "${messageText}"`);
  const inlineKeyboard = {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '1 —á–∞—Å', callback_data: `postpone|1|${reminder._id}` },
          { text: '3 —á–∞—Å–∞', callback_data: `postpone|3|${reminder._id}` },
          { text: '—É—Ç—Ä–æ', callback_data: `postpone|—É—Ç—Ä–æ|${reminder._id}` },
          { text: '–≤–µ—á–µ—Ä', callback_data: `postpone|–≤–µ—á–µ—Ä|${reminder._id}` }
        ],
        [
          { text: '‚Ä¶', callback_data: `postpone|custom|${reminder._id}` },
          { text: '–ì–æ—Ç–æ–≤–æ', callback_data: `done|${reminder._id}` }
        ]
      ]
    }
  };
  const sentMessage = await bot.sendMessage(reminder.userId, messageText, inlineKeyboard);
  logger.info(`sendPlannedReminderRepeated: –ü–ª–∞–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è reminder ${reminder._id}, messageId: ${sentMessage.message_id}`);
  const plannedTime = toMoscow(displayTimeOverride);
  const cycle = {
    plannedTime: plannedTime.toJSDate(),
    postponedReminder: plannedTime.plus({ minutes: 3 }).toJSDate(),
    messageId: sentMessage.message_id
  };
  reminder.cycles.push(cycle);
  reminder.lastNotified = new Date();
  await reminder.save();
  logger.info(`sendPlannedReminderRepeated: –¶–∏–∫–ª –ø–æ–≤—Ç–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è reminder ${reminder._id}: ${JSON.stringify(cycle)}`);
}

async function sendOneOffReminder(reminder) {
  const displayTime = toMoscow(reminder.datetime).toFormat('HH:mm');
  const messageText = `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${reminder.description}\nüïí ${displayTime}`;
  const inlineKeyboard = {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '1 —á–∞—Å', callback_data: `postpone|1|${reminder._id}` },
          { text: '3 —á–∞—Å–∞', callback_data: `postpone|3|${reminder._id}` },
          { text: '—É—Ç—Ä–æ', callback_data: `postpone|—É—Ç—Ä–æ|${reminder._id}` },
          { text: '–≤–µ—á–µ—Ä', callback_data: `postpone|–≤–µ—á–µ—Ä|${reminder._id}` }
        ],
        [
          { text: '‚Ä¶', callback_data: `postpone|custom|${reminder._id}` },
          { text: '–ì–æ—Ç–æ–≤–æ', callback_data: `done|${reminder._id}` }
        ]
      ]
    }
  };
  const sentMessage = await bot.sendMessage(reminder.userId, messageText, inlineKeyboard);
  logger.info(`sendOneOffReminder: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è reminder ${reminder._id}, messageId: ${sentMessage.message_id}`);
  reminder.messageId = sentMessage.message_id;
  reminder.lastNotified = new Date();
  reminder.postponedReminder = DateTime.local().setZone('Europe/Moscow').plus({ minutes: 3 }).toJSDate();
  await reminder.save();
}

async function processPostponedOneOff(reminder) {
  await processPostponed(reminder, {});
}

async function processPostponedCycles(reminder) {
  if (reminder.cycles && reminder.cycles.length > 0) {
    const cycle = reminder.cycles[reminder.cycles.length - 1];
    const postponedTime = DateTime.fromJSDate(cycle.postponedReminder, { zone: 'Europe/Moscow' });
    const now = DateTime.local().setZone('Europe/Moscow');
    if (now >= postponedTime) {
      logger.info(`processPostponedCycles: –í—Ä–µ–º—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è reminder ${reminder._id} –ø—Ä–∏—à–ª–æ`);
      await processPostponed(reminder, { cycle });
    }
  }
}

async function handleCallback(query) {
  try {
    const data = query.data;
    const chatId = query.message.chat.id;
    const messageId = query.message.message_id;
    const parts = data.split('|');
    if (parts[0] === 'postpone') {
      const postponeValue = parts[1];
      const reminderId = parts[2];
      const reminder = await Reminder.findById(reminderId);
      if (!reminder) {
        await bot.answerCallbackQuery(query.id, { text: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
        return;
      }
      if (postponeValue === 'custom') {
        pendingRequests.pendingPostpone[chatId] = { reminderId, messageId };
        await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç—Å—Ä–æ—á–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "30 –º–∏–Ω—É—Ç" –∏–ª–∏ "—á–µ—Ä–µ–∑ 1.5 —á–∞—Å–∞"):');
        await bot.answerCallbackQuery(query.id, { text: '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç—Å—Ä–æ—á–∫–∏' });
        return;
      } else {
        let newDateTime;
        if (postponeValue === '—É—Ç—Ä–æ') {
          const nowLuxon = DateTime.local().setZone('Europe/Moscow');
          newDateTime = nowLuxon.hour < 8
            ? nowLuxon.set({ hour: 8, minute: 0, second: 0, millisecond: 0 })
            : nowLuxon.plus({ days: 1 }).set({ hour: 8, minute: 0, second: 0, millisecond: 0 });
          newDateTime = newDateTime.toJSDate();
        } else if (postponeValue === '–≤–µ—á–µ—Ä') {
          const nowLuxon = DateTime.local().setZone('Europe/Moscow');
          newDateTime = nowLuxon.hour < 19
            ? nowLuxon.set({ hour: 19, minute: 0, second: 0, millisecond: 0 })
            : nowLuxon.plus({ days: 1 }).set({ hour: 19, minute: 0, second: 0, millisecond: 0 });
          newDateTime = newDateTime.toJSDate();
        } else {
          const hours = parseFloat(postponeValue);
          newDateTime = DateTime.local().plus({ hours }).toJSDate();
        }
        await cancelReminderJobs(reminderId);
        reminder.datetime = newDateTime;
        reminder.nextReminder = null;
        reminder.cycles = [];
        reminder.messageId = null;
        reminder.postponedReminder = null;
        await reminder.save();
        const formattedNewTime = DateTime.fromJSDate(newDateTime).setZone('Europe/Moscow').toFormat('HH:mm');
        logger.info(`handleCallback (postpone): –î–ª—è reminder ${reminder._id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è ${newDateTime}`);
        try {
          await bot.editMessageText(`üîî –û—Ç–ª–æ–∂–µ–Ω–æ: ${reminder.description}`, { 
            chat_id: chatId, 
            message_id: messageId, 
            reply_markup: { inline_keyboard: [] }, 
            parse_mode: "HTML" 
          });
        } catch (e) {
          logger.error(`handleCallback (postpone): –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è reminder ${reminder._id}: ${e.message}`);
        }
        await bot.sendMessage(chatId, `–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ–≤—Ç–æ—Ä: ${reminder.description}\nüïí ${formattedNewTime}`, { parse_mode: "HTML" });
        await scheduleReminder(reminder);
        await bot.answerCallbackQuery(query.id, { text: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç—Å—Ä–æ—á–µ–Ω–æ' });
      }
    } else if (parts[0] === 'done') {
      const reminderId = parts[1];
      const reminder = await Reminder.findById(reminderId);
      if (!reminder) {
        await bot.answerCallbackQuery(query.id, { text: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
        return;
      }
      await cancelReminderJobs(reminderId);
      if (reminder.repeat) {
        const cycleIndex = reminder.cycles.findIndex(c => c.messageId === messageId);
        if (cycleIndex !== -1) {
          reminder.cycles.splice(cycleIndex, 1);
          await reminder.save();
          try {
            await bot.editMessageText(`‚úÖ ${reminder.description}`, { 
              chat_id: chatId, 
              message_id: messageId, 
              reply_markup: { inline_keyboard: [] }
            });
          } catch (e) {
            logger.error(`handleCallback (done): –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è reminder ${reminder._id}: ${e.message}`);
          }
          await bot.answerCallbackQuery(query.id, { text: '–¶–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω' });
        } else {
          await bot.answerCallbackQuery(query.id, { text: '–¶–∏–∫–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
      } else {
        await Reminder.findByIdAndDelete(reminderId);
        try {
          await bot.editMessageText(`‚úÖ ${reminder.description}`, { 
            chat_id: chatId, 
            message_id: messageId, 
            reply_markup: { inline_keyboard: [] }
          });
        } catch (e) {
          logger.error(`handleCallback (done): –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ reminder ${reminder._id}: ${e.message}`);
        }
        await bot.answerCallbackQuery(query.id, { text: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ' });
      }
    }
  } catch (error) {
    logger.error(`handleCallback: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: ${error.message}`);
  }
}

module.exports = {
  createReminder,
  listReminders,
  deleteAllReminders,
  deleteReminder,
  handleCallback,
  Reminder,
  sendOneOffReminder,
  processPlannedRepeat,
  sendPlannedReminderRepeated,
  processPostponedOneOff,
  processPostponedCycles,
};