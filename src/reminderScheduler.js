const schedule = require('node-schedule');
const mongoose = require('mongoose');
const bot = require('./botInstance');
const { extractDate } = require('./dateParser');

const reminderSchema = new mongoose.Schema({
  userId: String,
  description: String,
  datetime: Date,
  repeat: String,
  lastNotified: Date,
  lastMessageId: Number,
});

const Reminder = mongoose.models.Reminder || mongoose.model('Reminder', reminderSchema);

async function removeButtonsFromMessage(chatId, messageId) {
  try {
    await bot.editMessageReplyMarkup(
      { inline_keyboard: [] },
      { chat_id: chatId, message_id: messageId }
    );
    console.log(`‚úÖ –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId} –≤ —á–∞—Ç–µ ${chatId}`);
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}:`, err);
  }
}

async function sendReminderNotification(reminder) {
  console.log(`üîî –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${reminder.description} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${reminder.userId} (ID: ${reminder._id})`);
  const keyboard = {
    inline_keyboard: [
      [
        { text: '1 —á–∞—Å', callback_data: `snooze_1h_${reminder._id}` },
        { text: '3 —á–∞—Å–∞', callback_data: `snooze_3h_${reminder._id}` },
        { text: '...', callback_data: `custom_snooze_${reminder._id}` },
      ],
      [
        { text: '–ì–æ—Ç–æ–≤–æ', callback_data: `done_${reminder._id}` },
      ]
    ]
  };

  const message = await bot.sendMessage(reminder.userId, `üîî ${reminder.description}`, { 
    reply_markup: keyboard 
  });

  await Reminder.updateOne(
    { _id: reminder._id },
    { lastNotified: new Date() }
  );

  return message.message_id;
}

async function checkReminders() {
  const now = new Date();
  console.log(`‚è≥ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (${now.toISOString()})`);

  const reminders = await Reminder.find({
    datetime: { $lte: now },
  });

  console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${reminders.length} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.`);

  for (const reminder of reminders) {
    console.log(`üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ID ${reminder._id}, –≤—Ä–µ–º—è: ${reminder.datetime}`);

    if (!reminder.lastNotified || (now - reminder.lastNotified) > 540000) {
      if (reminder.lastMessageId) {
        await removeButtonsFromMessage(reminder.userId, reminder.lastMessageId);
      }

      const messageId = await sendReminderNotification(reminder);

      const newTime = new Date(Date.now() + 9 * 60000);
      console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ID: ${reminder._id} -> ${newTime}`);
      await Reminder.updateOne(
        { _id: reminder._id },
        { datetime: newTime, lastMessageId: messageId }
      );
    }
  }
}

schedule.scheduleJob('* * * * *', checkReminders);

bot.on('callback_query', async (callbackQuery) => {
  console.log(`üîò –ü–æ–ª—É—á–µ–Ω callback: ${callbackQuery.data}`);
  const navigationActions = ['first_page', 'prev_page', 'next_page', 'last_page'];

  if (navigationActions.includes(callbackQuery.data)) {
    return bot.answerCallbackQuery(callbackQuery.id);
  }

  const parts = callbackQuery.data.split('_');
  const reminderId = parts.pop();
  const action = parts.join('_');

  console.log(`üîç –†–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–π callback -> –î–µ–π—Å—Ç–≤–∏–µ: ${action}, ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${reminderId}`);

  if (!mongoose.Types.ObjectId.isValid(reminderId)) {
    console.log(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${reminderId}`);
    return bot.answerCallbackQuery(callbackQuery.id, { text: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è." });
  }

  const reminder = await Reminder.findById(reminderId);
  if (!reminder) {
    console.log(`‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ID: ${reminderId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
    return bot.answerCallbackQuery(callbackQuery.id, { text: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ." });
  }

  switch (action) {
    case 'snooze_1h':
    case 'snooze_3h':
      const hours = parseInt(action.replace('snooze_', '').replace('h', ''), 10);
      const newDate = new Date(Date.now() + hours * 3600000);
      await Reminder.updateOne(
        { _id: reminderId },
        { datetime: newDate }
      );
      bot.sendMessage(callbackQuery.message.chat.id, `‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ ${newDate.toLocaleString()}`);
      break;

    case 'custom_snooze':
      bot.sendMessage(callbackQuery.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞")');
      break;

    case 'done':
      await Reminder.deleteOne({ _id: reminderId });
      bot.deleteMessage(callbackQuery.message.chat.id, callbackQuery.message.message_id).catch(() => {});
      bot.sendMessage(callbackQuery.message.chat.id, '‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ.');
      break;
  }

  bot.answerCallbackQuery(callbackQuery.id);
});

module.exports = {
  checkReminders,
  removeButtonsFromMessage,
};