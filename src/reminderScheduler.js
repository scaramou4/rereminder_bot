const schedule = require('node-schedule');
const mongoose = require('mongoose');
const bot = require('./botInstance');
const { extractDate } = require('./dateParser');

const reminderSchema = new mongoose.Schema({
  userId: String,
  description: String,
  datetime: Date,
  repeat: String,
  lastNotified: Date, // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
});

const Reminder = mongoose.models.Reminder || mongoose.model('Reminder', reminderSchema);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
async function sendReminderNotification(reminder) {
  console.log(`üîî –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${reminder.description} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${reminder.userId} (ID: ${reminder._id})`);
  const keyboard = {
    inline_keyboard: [
      [
        { text: '1 —á–∞—Å', callback_data: `snooze_1h_${reminder._id}` },
        { text: '3 —á–∞—Å–∞', callback_data: `snooze_3h_${reminder._id}` },
        { text: '...', callback_data: `custom_snooze_${reminder._id}` },
      ],
      [
        { text: '–ì–æ—Ç–æ–≤–æ', callback_data: `done_${reminder._id}` },
      ]
    ]
  };

  const message = await bot.sendMessage(reminder.userId, `üîî ${reminder.description}`, { 
    reply_markup: keyboard 
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  await Reminder.updateOne(
    { _id: reminder._id },
    { lastNotified: new Date() }
  );
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async function checkReminders() {
  const now = new Date();
  console.log(`‚è≥ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (${now.toISOString()})`);

  // –ò—â–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Å—Ç—É–ø–∏–ª–æ
  const reminders = await Reminder.find({
    datetime: { $lte: now },
  });

  console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${reminders.length} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.`);

  for (const reminder of reminders) {
    console.log(`üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ID ${reminder._id}, –≤—Ä–µ–º—è: ${reminder.datetime}`);

    // –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –∏–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 9 –º–∏–Ω—É—Ç
    if (!reminder.lastNotified || (now - reminder.lastNotified) > 540000) {
      await sendReminderNotification(reminder);

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ +9 –º–∏–Ω—É—Ç
      const newTime = new Date(Date.now() + 9 * 60000);
      console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ID: ${reminder._id} -> ${newTime}`);
      await Reminder.updateOne(
        { _id: reminder._id },
        { datetime: newTime }
      );
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
schedule.scheduleJob('* * * * *', checkReminders);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
  console.log(`üîò –ü–æ–ª—É—á–µ–Ω callback: ${callbackQuery.data}`);
  const parts = callbackQuery.data.split('_');
  const action = parts[0];
  const reminderId = parts.slice(-1)[0];

  console.log(`üîç –†–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–π callback -> –î–µ–π—Å—Ç–≤–∏–µ: ${action}, ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${reminderId}`);

  if (!mongoose.Types.ObjectId.isValid(reminderId)) {
    console.log(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${reminderId}`);
    return bot.answerCallbackQuery(callbackQuery.id, { text: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è." });
  }

  const reminder = await Reminder.findById(reminderId);
  if (!reminder) {
    console.log(`‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ID: ${reminderId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
    return bot.answerCallbackQuery(callbackQuery.id, { text: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ." });
  }

  switch (action) {
    case 'snooze':
      const hours = parseInt(parts[1].replace('h', ''), 10);
      const newDate = new Date(Date.now() + hours * 3600000);
      console.log(`‚è≥ –ü–µ—Ä–µ–Ω–æ—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ID: ${reminderId} –Ω–∞ ${newDate}`);
      await Reminder.updateOne(
        { _id: reminderId },
        { datetime: newDate }
      );
      bot.editMessageReplyMarkup(
        { inline_keyboard: [] },
        { chat_id: callbackQuery.message.chat.id, message_id: callbackQuery.message.message_id }
      ).catch(() => {});
      bot.sendMessage(callbackQuery.message.chat.id, `‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:\n\nüìå ${reminder.description}\nüîÅ –ü–æ–≤—Ç–æ—Ä: ${reminder.repeat ? reminder.repeat : '–Ω–µ—Ç'}\nüïí ${newDate.toLocaleDateString('ru-RU', { day: 'numeric', month: 'long', year: 'numeric' })} (${newDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })})`);
      break;

    case 'custom':
      console.log(`üìù –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è ID: ${reminderId}`);
      bot.editMessageReplyMarkup(
        { inline_keyboard: [] },
        { chat_id: callbackQuery.message.chat.id, message_id: callbackQuery.message.message_id }
      );
      await bot.sendMessage(callbackQuery.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞" –∏–ª–∏ "–∑–∞–≤—Ç—Ä–∞ –≤ 10:00"):');
      break;

    case 'done':
      console.log(`‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ID: ${reminderId} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∏ —É–¥–∞–ª–µ–Ω–æ.`);
      await Reminder.deleteOne({ _id: reminderId });
      bot.deleteMessage(callbackQuery.message.chat.id, callbackQuery.message.message_id).catch(() => {});
      bot.sendMessage(callbackQuery.message.chat.id, '‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ.');
      break;
  }

  bot.answerCallbackQuery(callbackQuery.id);
});