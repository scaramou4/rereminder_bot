// src/reminderScheduler.js

const mongoose = require('mongoose');
const { DateTime } = require('luxon');
const bot = require('./botInstance');
const logger = require('./logger');
const pendingRequests = require('./pendingRequests');
const { computeNextTimeFromScheduled, parseReminder } = require('./dateParser');
const { parseTimeSpec } = require('./timeSpecParser');
const { agenda, defineSendReminderJob, scheduleReminder, cancelReminderJobs } = require('./agendaScheduler');
const Reminder = require('./models/reminder');
const UserSettings = require('./models/userSettings');
const { showPostponeSettingsMenu, handleSettingsCallback, getUserTimezone, showSettingsMenu, buildUserPostponeKeyboard } = require('./settings');

mongoose
  .connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/reminders')
  .then(() => logger.info('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'))
  .catch((error) => logger.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: ' + error.message));

function toMoscow(date, userTimezone = getUserTimezone()) {
  return DateTime.fromJSDate(date).setZone(userTimezone);
}

async function createReminder(userId, description, datetime, repeat) {
  const reminder = new Reminder({
    userId,
    description,
    datetime,
    repeat: repeat || null,
    nextReminder: datetime,
    lastNotified: null,
    cycles: [],
    messageId: null,
    postponedReminder: null,
    completed: false,
    // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –∏–Ω–µ—Ä—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞:
    inertiaMessageId: null,
    initialMessageEdited: false
  });
  await reminder.save();
  logger.info(`createReminder: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è user ${userId} –Ω–∞ ${new Date(datetime)}`);
  return reminder;
}

async function listReminders(userId) {
  try {
    const now = new Date();
    const reminders = await Reminder.aggregate([
      { $match: { userId: userId.toString(), completed: false } },
      {
        $addFields: {
          nextEvent: {
            $cond: [
              { $ne: ["$repeat", null] },
              { $ifNull: ["$nextReminder", "$datetime"] },
              { $ifNull: ["$postponedReminder", "$datetime"] }
            ]
          }
        }
      },
      {
        $match: {
          $or: [
            { nextEvent: { $gte: now } },
            { inertiaMessageId: { $ne: null } }
          ]
        }
      },
      { $sort: { nextEvent: 1 } }
    ]);
    logger.info(`listReminders: –ù–∞–π–¥–µ–Ω–æ ${reminders.length} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è user ${userId}`);
    return reminders;
  } catch (error) {
    logger.error(`listReminders: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è ${userId}: ${error.message}`);
    return [];
  }
}

// –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:
// –î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–º–µ–Ω—è—é—Ç—Å—è –∑–∞–¥–∞—á–∏ Agenda, –∑–∞—Ç–µ–º —É–¥–∞–ª—è—é—Ç—Å—è –∑–∞–ø–∏—Å–∏
async function deleteAllReminders(userId) {
  try {
    const reminders = await Reminder.find({ userId: userId.toString(), completed: false });
    for (const reminder of reminders) {
      await cancelReminderJobs(reminder._id);
      logger.info(`deleteAllReminders: –û—Ç–º–µ–Ω–µ–Ω—ã –∑–∞–¥–∞—á–∏ –¥–ª—è reminder ${reminder._id}`);
    }
    await Reminder.deleteMany({ userId: userId.toString() });
    logger.info(`deleteAllReminders: –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è user ${userId} —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã.`);
  } catch (error) {
    logger.error(`deleteAllReminders: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è ${userId}: ${error.message}`);
    throw error;
  }
}

// –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –æ—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
async function deleteReminder(reminderId) {
  try {
    const reminder = await Reminder.findById(reminderId);
    if (reminder) {
      await cancelReminderJobs(reminderId);
      logger.info(`deleteReminder: –û—Ç–º–µ–Ω–µ–Ω—ã –∑–∞–¥–∞—á–∏ –¥–ª—è reminder ${reminderId}`);
      const deleted = await Reminder.findByIdAndDelete(reminderId);
      if (deleted) {
        logger.info(`deleteReminder: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${reminderId} —É–¥–∞–ª–µ–Ω–æ.`);
        return deleted;
      } else {
        logger.error(`deleteReminder: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${reminderId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.`);
        return null;
      }
    } else {
      logger.error(`deleteReminder: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${reminderId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
      return null;
    }
  } catch (error) {
    logger.error(`deleteReminder: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ${reminderId}: ${error.message}`);
    return null;
  }
}

async function handleCallback(query) {
  const data = query.data;
  const chatId = query.message.chat.id;
  const messageId = query.message.message_id;
  logger.info(`handleCallback: –ü–æ–ª—É—á–µ–Ω callback —Å –¥–∞–Ω–Ω—ã–º–∏: ${data}`);

  if (data.startsWith('settings_')) {
    await handleSettingsCallback(query);
    return;
  }

  if (data.startsWith('done|')) {
    const reminderId = data.split('|')[1];
    try {
      const reminder = await Reminder.findById(reminderId);
      if (!reminder) {
        await bot.sendMessage(chatId, '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
        return;
      }
      await cancelReminderJobs(reminderId);
      reminder.completed = true;
      reminder.datetime = null;
      reminder.repeat = null;
      reminder.nextReminder = null;
      reminder.lastNotified = null;
      reminder.cycles = [];
      reminder.messageId = null;
      reminder.postponedReminder = null;
      reminder.inertiaMessageId = null;
      reminder.initialMessageEdited = false;
      await reminder.save();
      await bot.editMessageText(`‚úÖ –ì–æ—Ç–æ–≤–æ: ${reminder.description}`, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: { inline_keyboard: [] },
        parse_mode: "HTML"
      });
      await bot.answerCallbackQuery(query.id, { text: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ.' });
    } catch (err) {
      logger.error(`handleCallback: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ "–ì–æ—Ç–æ–≤–æ" –¥–ª—è reminder ${reminderId}: ${err.message}`);
      await bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.', show_alert: true });
    }
    return;
  }

  // –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback (–æ—Ç–ª–æ–∂–∏—Ç—å, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ –∏ —Ç.–¥.)
  // –æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚Äì –æ–Ω —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
}

async function sendOneOffReminder(reminder) {
  const userTimezone = getUserTimezone(reminder.userId);
  const settings = await UserSettings.findOne({ userId: reminder.userId.toString() });
  const delay = settings?.autoPostponeDelay || 15; // –î–µ—Ñ–æ–ª—Ç 15 –º–∏–Ω—É—Ç
  const displayTime = toMoscow(reminder.datetime, userTimezone).toFormat('HH:mm');
  const reminderText = `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${reminder.description}\nüïí ${displayTime}`;
  const inlineKeyboard = await buildUserPostponeKeyboard(reminder.userId, reminder._id, true);
  try {
    const sentMessage = await bot.sendMessage(reminder.userId, reminderText, inlineKeyboard);
    reminder.messageId = sentMessage.message_id;
    reminder.lastNotified = new Date();
    reminder.datetime = toMoscow(reminder.lastNotified, userTimezone).plus({ minutes: delay }).toJSDate();
    await reminder.save();
    await scheduleReminder(reminder);
    logger.info(`sendOneOffReminder: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è reminder ${reminder._id} —Å –∞–≤—Ç–æ–æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ–º ${delay} –º–∏–Ω, messageId: ${sentMessage.message_id}`);
  } catch (err) {
    logger.error(`sendOneOffReminder: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ reminder ${reminder._id}: ${err.message}`);
    if (err.message.includes('No document found')) {
      logger.warn(`sendOneOffReminder: Reminder ${reminder._id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.`);
      return;
    }
    throw err;
  }
}

async function sendReminder(reminderId) {
  logger.info(`sendReminder: Job started for reminder ${reminderId}`);
  try {
    const reminder = await Reminder.findById(reminderId);
    if (!reminder) {
      logger.error(`sendReminder: Reminder ${reminderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }
    const now = new Date();
    const userTimezone = getUserTimezone(reminder.userId);
    const nowInUserTimezone = toMoscow(now, userTimezone);
    logger.info(`sendReminder: –ü—Ä–æ–≤–µ—Ä–∫–∞ reminder ${reminderId}: datetime=${reminder.datetime}, lastNotified=${reminder.lastNotified}, now=${nowInUserTimezone.toISO()}`);
    
    if (reminder.lastProcessed && (new Date() - reminder.lastProcessed) < 1000) {
      logger.warn(`sendReminder: –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –≤—ã–∑–æ–≤ –¥–ª—è reminder ${reminderId}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.`);
      return;
    }

    if (reminder.completed) {
      logger.info(`sendReminder: Reminder ${reminderId} –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.`);
      return;
    }

    if (reminder.repeat) {
      if (!reminder.nextReminder || nowInUserTimezone.toJSDate() >= reminder.nextReminder) {
        logger.info(`sendReminder: –ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –≤—ã–∑—ã–≤–∞–µ–º sendPlannedReminderRepeated`);
        await sendPlannedReminderRepeated(reminder, reminder.nextReminder || reminder.datetime);
      }
    } else if (!reminder.lastNotified && !reminder.completed && (!reminder.datetime || nowInUserTimezone.toJSDate() >= reminder.datetime)) {
      logger.info(`sendReminder: –ü–µ—Ä–≤–æ–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –≤—ã–∑—ã–≤–∞–µ–º sendOneOffReminder`);
      await sendOneOffReminder(reminder);
    } else if (reminder.datetime && !reminder.completed && nowInUserTimezone.toJSDate() >= reminder.datetime) {
      logger.info(`sendReminder: –ò–Ω–µ—Ä—Ü–∏–æ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –≤—ã–∑—ã–≤–∞–µ–º processPostponed`);
      await processPostponed(reminder);
    } else {
      logger.info(`sendReminder: –ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è reminder ${reminderId} –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç`);
    }
    
    reminder.lastProcessed = new Date();
    await reminder.save();
  } catch (err) {
    logger.error(`sendReminder: –û—à–∏–±–∫–∞ –¥–ª—è reminderId=${reminderId}: ${err.message}`);
    if (err.message.includes('No document found')) {
      logger.warn(`sendReminder: Reminder ${reminderId} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.`);
      return;
    }
    throw err;
  }
}

async function sendPlannedReminderRepeated(reminder, displayTimeOverride) {
  const userTimezone = getUserTimezone(reminder.userId);
  const displayTime = toMoscow(displayTimeOverride, userTimezone).toFormat('HH:mm');
  const text = `–ü–æ–≤—Ç–æ—Ä –ø–æ –ø–ª–∞–Ω—É: ${reminder.description}\nüïí ${displayTime}`;
  logger.info(`sendPlannedReminderRepeated: –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è reminder ${reminder._id}. –¢–µ–∫—Å—Ç: "${text}"`);
  const inlineKeyboard = await buildUserPostponeKeyboard(reminder.userId, reminder._id, true);
  try {
    const sentMessage = await bot.sendMessage(reminder.userId, text, inlineKeyboard);
    logger.info(`sendPlannedReminderRepeated: –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è reminder ${reminder._id}, messageId: ${sentMessage.message_id}`);
    const plannedTime = toMoscow(displayTimeOverride, userTimezone);
    const cycle = {
      plannedTime: plannedTime.toJSDate(),
      postponedReminder: plannedTime.plus({ minutes: 15 }).toJSDate(),
      messageId: sentMessage.message_id
    };
    reminder.cycles.push(cycle);
    reminder.lastNotified = new Date();
    if (reminder.repeat) {
      const nextOccur = computeNextTimeFromScheduled(displayTimeOverride, reminder.repeat);
      reminder.nextReminder = nextOccur;
      await reminder.save();
      await scheduleReminder(reminder);
    }
    await reminder.save();
  } catch (err) {
    logger.error(`sendPlannedReminderRepeated: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ${reminder._id}: ${err.message}`);
    throw err;
  }
}

async function processPostponed(reminder, options = {}) {
  const userTimezone = getUserTimezone(reminder.userId);
  const settings = await UserSettings.findOne({ userId: reminder.userId.toString() });
  const delay = settings?.autoPostponeDelay || 15;
  const displayTime = options.cycle
    ? toMoscow(options.cycle.plannedTime, userTimezone).toFormat('HH:mm')
    : toMoscow(reminder.datetime, userTimezone).toFormat('HH:mm');
  const editText = `–û—Ç–ª–æ–∂–µ–Ω–æ: ${reminder.description}\nüïí ${displayTime}`;
  const previousMessageId = reminder.messageId;
  try {
    if (previousMessageId) {
      await bot.editMessageText(editText, {
        chat_id: reminder.userId,
        message_id: previousMessageId,
        reply_markup: { inline_keyboard: [] },
        parse_mode: "HTML"
      });
      logger.info(`processPostponed: –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω—ã —É reminder ${reminder._id}, messageId: ${previousMessageId}`);
    } else {
      logger.warn(`processPostponed: –ù–µ—Ç previousMessageId –¥–ª—è reminder ${reminder._id}`);
    }
  } catch (err) {
    logger.error(`processPostponed: –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è reminder ${reminder._id}: ${err.message}`);
  }
  const inlineKeyboard = await buildUserPostponeKeyboard(reminder.userId, reminder._id, true);
  const messageText = options.cycle
    ? `–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ–≤—Ç–æ—Ä: ${reminder.description}\nüïí ${displayTime}`
    : `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${reminder.description}\nüïí ${displayTime}`;
  try {
    const sent = await bot.sendMessage(reminder.userId, messageText, inlineKeyboard);
    logger.info(`processPostponed: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è reminder ${reminder._id}, msgId=${sent.message_id}`);
    const newPostponed = toMoscow(new Date(), userTimezone).plus({ minutes: delay }).toJSDate();
    if (options.cycle) {
      options.cycle.messageId = sent.message_id;
      options.cycle.postponedReminder = newPostponed;
    } else {
      reminder.messageId = sent.message_id;
      reminder.datetime = newPostponed;
      reminder.lastNotified = new Date();
      reminder.postponedReminder = null;
    }
    await reminder.save();
    await scheduleReminder(reminder);
    logger.info(`processPostponed: –ò–Ω–µ—Ä—Ü–∏–æ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è ${reminder._id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ ${reminder.datetime}`);
  } catch (err) {
    logger.error(`processPostponed: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è reminder ${reminder._id}: ${err.message}`);
    throw err;
  }
}

// –í—ã–∑–æ–≤ defineSendReminderJob —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
defineSendReminderJob(sendReminder);

module.exports = {
  createReminder,
  listReminders,
  deleteAllReminders,
  deleteReminder,
  handleCallback,
  Reminder,
  sendOneOffReminder,
  sendReminder,
  sendPlannedReminderRepeated,
  processPostponed,
  scheduleReminder,
  buildUserPostponeKeyboard
};